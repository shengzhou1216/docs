(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{559:function(e,v,a){"use strict";a.r(v);var t=a(20),_=Object(t.a)({},(function(){var e=this,v=e.$createElement,a=e._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"布尔运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔运算符"}},[e._v("#")]),e._v(" 布尔运算符")]),e._v(" "),a("p",[e._v("布尔运算符用于将表达式转为布尔值，一共包含四个运算符。")]),e._v(" "),a("ul",[a("li",[e._v("取反运算符："),a("code",[e._v("!")])]),e._v(" "),a("li",[e._v("且运算符："),a("code",[e._v("&&")])]),e._v(" "),a("li",[e._v("或运算符："),a("code",[e._v("||")])]),e._v(" "),a("li",[e._v("三元运算符："),a("code",[e._v("?:")])])]),e._v(" "),a("h2",{attrs:{id:"取反运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取反运算符"}},[e._v("#")]),e._v(" 取反运算符（!）")]),e._v(" "),a("p",[e._v("取反运算符是一个感叹号，用于将布尔值变为相反值，即"),a("code",[e._v("true")]),e._v("变成"),a("code",[e._v("false")]),e._v("，"),a("code",[e._v("false")]),e._v("变成"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("!true // false\n!false // true\n")])])]),a("p",[e._v("对于非布尔值，取反运算符会将其转为布尔值。可以这样记忆，以下六个值取反后为"),a("code",[e._v("true")]),e._v("，其他值都为"),a("code",[e._v("false")]),e._v("。")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("undefined")])]),e._v(" "),a("li",[a("code",[e._v("null")])]),e._v(" "),a("li",[a("code",[e._v("false")])]),e._v(" "),a("li",[a("code",[e._v("0")])]),e._v(" "),a("li",[a("code",[e._v("NaN")])]),e._v(" "),a("li",[e._v("空字符串（"),a("code",[e._v("''")]),e._v("）")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("!undefined // true\n!null // true\n!0 // true\n!NaN // true\n!\"\" // true\n\n!54 // false\n!'hello' // false\n![] // false\n!{} // false\n")])])]),a("p",[e._v("上面代码中，不管什么类型的值，经过取反运算后，都变成了布尔值。")]),e._v(" "),a("p",[a("strong",[e._v("如果对一个值连续做两次取反运算，等于将其转为对应的布尔值，与"),a("code",[e._v("Boolean")]),e._v("函数的作用相同。这是一种常用的类型转换的写法。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("!!x\n// 等同于\nBoolean(x)\n")])])]),a("p",[e._v("上面代码中，不管"),a("code",[e._v("x")]),e._v("是什么类型的值，经过两次取反运算后，变成了与"),a("code",[e._v("Boolean")]),e._v("函数结果相同的布尔值。所以，两次取反就是将一个值转为布尔值的简便写法。")]),e._v(" "),a("h2",{attrs:{id:"且运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#且运算符"}},[e._v("#")]),e._v(" 且运算符（&&）")]),e._v(" "),a("p",[e._v("且运算符（"),a("code",[e._v("&&")]),e._v("）往往用于多个表达式的求值。")]),e._v(" "),a("p",[e._v("它的运算规则是：如果第一个运算子的布尔值为"),a("code",[e._v("true")]),e._v("，则返回第二个运算子的值（注意是值，不是布尔值）；如果第一个运算子的布尔值为"),a("code",[e._v("false")]),e._v("，则直接返回第一个运算子的值，且不再对第二个运算子求值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'t' && '' // \"\"\n't' && 'f' // \"f\"\n't' && (1 + 2) // 3\n'' && 'f' // \"\"\n'' && '' // \"\"\n\nvar x = 1;\n(1 - 1) && ( x += 1) // 0\nx // 1\n")])])]),a("p",[e._v("上面代码的最后一个例子，由于且运算符的第一个运算子的布尔值为"),a("code",[e._v("false")]),e._v("，则直接返回它的值"),a("code",[e._v("0")]),e._v("，而不再对第二个运算子求值，所以变量"),a("code",[e._v("x")]),e._v("的值没变。")]),e._v(" "),a("p",[e._v("这种跳过第二个运算子的机制，被称为“短路”。有些程序员喜欢用它取代"),a("code",[e._v("if")]),e._v("结构，比如下面是一段"),a("code",[e._v("if")]),e._v("结构的代码，就可以用且运算符改写。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("if (i) {\n  doSomething();\n}\n\n// 等价于\n\ni && doSomething();\n")])])]),a("p",[e._v("上面代码的两种写法是等价的，但是后一种不容易看出目的，也不容易除错，建议谨慎使用。")]),e._v(" "),a("p",[e._v("且运算符可以多个连用，这时返回第一个布尔值为"),a("code",[e._v("false")]),e._v("的表达式的值。如果所有表达式的布尔值都为"),a("code",[e._v("true")]),e._v("，则返回最后一个表达式的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("true && 'foo' && '' && 4 && 'foo' && true\n// ''\n\n1 && 2 && 3\n// 3\n")])])]),a("p",[e._v("上面代码中，例一里面，第一个布尔值为"),a("code",[e._v("false")]),e._v("的表达式为第三个表达式，所以得到一个空字符串。例二里面，所有表达式的布尔值都是"),a("code",[e._v("true")]),e._v("，所以返回最后一个表达式的值"),a("code",[e._v("3")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"或运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#或运算符"}},[e._v("#")]),e._v(" 或运算符（||）")]),e._v(" "),a("p",[e._v("或运算符（"),a("code",[e._v("||")]),e._v("）也用于多个表达式的求值。它的运算规则是：如果第一个运算子的布尔值为"),a("code",[e._v("true")]),e._v("，则返回第一个运算子的值，且不再对第二个运算子求值；如果第一个运算子的布尔值为"),a("code",[e._v("false")]),e._v("，则返回第二个运算子的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'t' || '' // \"t\"\n't' || 'f' // \"t\"\n'' || 'f' // \"f\"\n'' || '' // \"\"\n")])])]),a("p",[e._v("短路规则对这个运算符也适用。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var x = 1;\ntrue || (x = 2) // true\nx // 1\n")])])]),a("p",[e._v("上面代码中，或运算符的第一个运算子为"),a("code",[e._v("true")]),e._v("，所以直接返回"),a("code",[e._v("true")]),e._v("，不再运行第二个运算子。所以，"),a("code",[e._v("x")]),e._v("的值没有改变。这种只通过第一个表达式的值，控制是否运行第二个表达式的机制，就称为“短路”（short-cut）。")]),e._v(" "),a("p",[e._v("或运算符可以多个连用，这时返回第一个布尔值为"),a("code",[e._v("true")]),e._v("的表达式的值。如果所有表达式都为"),a("code",[e._v("false")]),e._v("，则返回最后一个表达式的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("false || 0 || '' || 4 || 'foo' || true\n// 4\n\nfalse || 0 || ''\n// ''\n")])])]),a("p",[e._v("上面代码中，例一里面，第一个布尔值为"),a("code",[e._v("true")]),e._v("的表达式是第四个表达式，所以得到数值4。例二里面，所有表达式的布尔值都为"),a("code",[e._v("false")]),e._v("，所以返回最后一个表达式的值。")]),e._v(" "),a("p",[e._v("或运算符常用于为一个变量设置默认值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function saveText(text) {\n  text = text || '';\n  // ...\n}\n\n// 或者写成\nsaveText(this.text || '')\n")])])]),a("p",[e._v("上面代码表示，如果函数调用时，没有提供参数，则该参数默认设置为空字符串。")]),e._v(" "),a("h2",{attrs:{id:"三元条件运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三元条件运算符"}},[e._v("#")]),e._v(" 三元条件运算符（?:）")]),e._v(" "),a("p",[e._v("三元条件运算符由问号（?）和冒号（:）组成，分隔三个表达式。它是 JavaScript 语言唯一一个需要三个运算子的运算符。如果第一个表达式的布尔值为"),a("code",[e._v("true")]),e._v("，则返回第二个表达式的值，否则返回第三个表达式的值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("'t' ? 'hello' : 'world' // \"hello\"\n0 ? 'hello' : 'world' // \"world\"\n")])])]),a("p",[e._v("上面代码的"),a("code",[e._v("t")]),e._v("和"),a("code",[e._v("0")]),e._v("的布尔值分别为"),a("code",[e._v("true")]),e._v("和"),a("code",[e._v("false")]),e._v("，所以分别返回第二个和第三个表达式的值。")]),e._v(" "),a("p",[e._v("通常来说，三元条件表达式与"),a("code",[e._v("if...else")]),e._v("语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，"),a("code",[e._v("if...else")]),e._v("是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合，只能使用三元条件表达式，而不能使用"),a("code",[e._v("if..else")]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(true ? 'T' : 'F');\n")])])]),a("p",[e._v("上面代码中，"),a("code",[e._v("console.log")]),e._v("方法的参数必须是一个表达式，这时就只能使用三元条件表达式。如果要用"),a("code",[e._v("if...else")]),e._v("语句，就必须改变整个代码写法了。")])])}),[],!1,null,null,null);v.default=_.exports}}]);