(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{486:function(t,a,e){t.exports=e.p+"assets/img/cpp-extension.f2284a4f.png"},487:function(t,a,e){t.exports=e.p+"assets/img/cmake-extension.fc0f38fc.png"},488:function(t,a,e){t.exports=e.p+"assets/img/cmake-selectkit.476d3cd2.png"},489:function(t,a,e){t.exports=e.p+"assets/img/cmake-select-variant.47e9cd6d.png"},490:function(t,a,e){t.exports=e.p+"assets/img/cmake-variant-type.2e951194.png"},491:function(t,a,e){t.exports=e.p+"assets/img/cmake-build.7924954c.png"},492:function(t,a,e){t.exports=e.p+"assets/img/cmake-debug.bed903ad.png"},588:function(t,a,e){"use strict";e.r(a);var s=e(20),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"vscode中调试c-linux"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vscode中调试c-linux"}},[t._v("#")]),t._v(" VScode中调试C++（Linux）")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-配置vscode使用gcc-c-编译器-g-和gdb-debugger"}},[t._v("1.配置VScode使用GCC C++编译器(g++)和GDB debugger")])]),s("li",[s("a",{attrs:{href:"#_2-cmake工具"}},[t._v("2. CMake工具")])]),s("li",[s("a",{attrs:{href:"#如何添加调试参数"}},[t._v("如何添加调试参数")])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"_1-配置vscode使用gcc-c-编译器-g-和gdb-debugger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-配置vscode使用gcc-c-编译器-g-和gdb-debugger"}},[t._v("#")]),t._v(" 1.配置VScode使用GCC C++编译器(g++)和GDB debugger")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("下载VSCode")])]),t._v(" "),s("li",[s("p",[t._v("安装C++插件（搜索'c++'）")]),t._v(" "),s("p",[s("img",{attrs:{src:e(486),alt:"C/C++ extension"}})])]),t._v(" "),s("li",[s("p",[t._v("检查gcc是否安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("gcc -v\n")])])]),s("p",[t._v("如果没有安装，需要安装:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" update\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt-get")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" build-essential gdb\n")])])])]),t._v(" "),s("li",[s("p",[t._v("打开C++项目")])]),t._v(" "),s("li",[s("p",[t._v("选择 "),s("strong",[t._v("Terminal")]),t._v(" > "),s("strong",[t._v("Configure Default Build Task")]),t._v(" ，然后选择 . Choose "),s("strong",[t._v("C/C++: g++ build active file")]),t._v(".")]),t._v(" "),s("p",[t._v("这一步会在 "),s("code",[t._v(".vscode")]),t._v("文件夹中创建一个 "),s("code",[t._v("tasks.json")]),t._v(" 文件")])]),t._v(" "),s("li",[s("p",[t._v("编译(根据tasks.json的配置编译):  press "),s("code",[t._v("Ctrl+Shift+B")]),t._v(" or from the "),s("strong",[t._v("Terminal")]),t._v(" main menu choose "),s("strong",[t._v("Run Build Task")]),t._v(".")])]),t._v(" "),s("li",[s("p",[t._v("调试:  From the main menu, choose "),s("strong",[t._v("Run")]),t._v(" > "),s("strong",[t._v("Add Configuration...")]),t._v(" and then choose "),s("strong",[t._v("C++ (GDB/LLDB)")]),t._v(".")]),t._v(" "),s("p",[t._v("这一步会创建一个 "),s("code",[t._v("launch.json")]),t._v(" 文件")])]),t._v(" "),s("li",[s("p",[t._v("开始调试")]),t._v(" "),s("p",[t._v("选中一个CPP文件，按下"),s("code",[t._v("F5")]),t._v("或选择  "),s("strong",[t._v("Run > Start Debugging")])])])]),t._v(" "),s("h2",{attrs:{id:"_2-cmake工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-cmake工具"}},[t._v("#")]),t._v(" 2. CMake工具")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("安装‘‘cmake tools’插件")]),t._v(" "),s("p",[s("img",{attrs:{src:e(487),alt:"CMake tools extension"}})])]),t._v(" "),s("li",[s("p",[t._v("检查cmake是否安装")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("cmake --version\n")])])]),s("p",[t._v("如果没有安装，需要先安装cmake：")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://apt.kitware.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kitware APT Repository"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("p",[t._v("To add the repository to your installation, do the following in order:")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("If you are using a "),s("a",{attrs:{href:"https://wiki.ubuntu.com/Minimal",target:"_blank",rel:"noopener noreferrer"}},[t._v("minimal"),s("OutboundLink")],1),t._v(" Ubuntu image or a Docker image, you may need to install the following packages:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-get update\nsudo apt-get install apt-transport-https ca-certificates gnupg software-properties-common wget\n")])])])]),t._v(" "),s("li",[s("p",[t._v("Obtain a copy of our signing key:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null\n")])])])]),t._v(" "),s("li",[s("p",[t._v("Add the repository to your sources list and update.")]),t._v(" "),s("p",[t._v("For Ubuntu Focal Fossa (20.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal main'\nsudo apt-get update\n")])])]),s("p",[t._v("For Ubuntu Bionic Beaver (18.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'\nsudo apt-get update\n")])])]),s("p",[t._v("For Ubuntu Xenial Xerus (16.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial main'\nsudo apt-get update\n")])])])]),t._v(" "),s("li",[s("p",[t._v("As an optional step, if you would like to subscribe to release candidates in addition to production releases, you can add our release candidate repository to your sources.")]),t._v(" "),s("p",[t._v("For Ubuntu Focal Fossa (20.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ focal-rc main'\nsudo apt-get update\n")])])]),s("p",[t._v("For Ubuntu Bionic Beaver (18.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic-rc main'\nsudo apt-get update\n")])])]),s("p",[t._v("For Ubuntu Xenial Xerus (16.04):")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ xenial-rc main'\nsudo apt-get update\n")])])]),s("p",[t._v("Note that if you add the release candidate repository, "),s("em",[t._v("you will still need to add the main repository as well")]),t._v(", as the release candidate repository does not provide production releases on its own.")])]),t._v(" "),s("li",[s("p",[t._v("As an optional step, we recommend that you also install our "),s("code",[t._v("kitware-archive-keyring")]),t._v(" package to ensure that your keyring stays up to date as we rotate our keys. Do the following:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-get install kitware-archive-keyring\nsudo rm /etc/apt/trusted.gpg.d/kitware.gpg\n")])])])])]),t._v(" "),s("p",[t._v("Now you can install any package from our APT repository. As an example, try installing the "),s("code",[t._v("cmake")]),t._v(" package:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("sudo apt-get install cmake\n")])])])]),t._v(" "),s("li",[s("p",[t._v("检查gcc是否安装了（同上）")])]),t._v(" "),s("li",[s("p",[t._v("创建CMake项目")]),t._v(" "),s("p",[t._v("Open the Command Palette (Ctrl+Shift+P) and run the "),s("strong",[t._v("CMake: Quick Start")]),t._v(" command:")])]),t._v(" "),s("li",[s("p",[t._v("Select a kit: 配置Cmake tools，使其知道系统中的编译器")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("Open the Command Palette ("),s("code",[t._v("Ctrl+Shift+P")]),t._v(") and run "),s("strong",[t._v("CMake: Select a Kit")]),t._v(". The extension will automatically scan for kits on your computer and create a list of compilers found on your system.")])]),t._v(" "),s("li",[s("p",[t._v("Select the compiler you want to use. For example, depending on the compilers you have installed, you might see something like:")]),t._v(" "),s("p",[s("img",{attrs:{src:e(488),alt:"Select the kit"}})])])])]),t._v(" "),s("li",[s("p",[t._v("Select a variant: 如何编译项目")]),t._v(" "),s("p",[t._v("To select a variant, open the Command Palette (Ctrl+Shift+P) run the "),s("strong",[t._v("CMake: Select Variant")]),t._v(" command.")]),t._v(" "),s("p",[s("img",{attrs:{src:e(489),alt:"Select variant"}})]),t._v(" "),s("p",[t._v("Select "),s("strong",[t._v("Debug")]),t._v(" to include debug information with your build.")]),t._v(" "),s("p",[s("img",{attrs:{src:e(490),alt:"Select debug variant type"}})])]),t._v(" "),s("li",[s("p",[t._v("CMake: Configure: 配置项目")]),t._v(" "),s("p",[t._v("Now that you've selected a kit and a variant, open the Command Palette (Ctrl+Shift+P) and run the "),s("strong",[t._v("CMake: Configure")]),t._v(" command to configure your project. This generates build files in the project's build folder using the kit and variant you selected.")])]),t._v(" "),s("li",[s("p",[t._v("编译项目")]),t._v(" "),s("p",[t._v("After configuring your project, you're ready to build. Open the Command Palette (Ctrl+Shift+P) and run the "),s("strong",[t._v("CMake: Build")]),t._v(" command, or select the "),s("strong",[t._v("Build")]),t._v(" button from the Status bar.")]),t._v(" "),s("p",[s("img",{attrs:{src:e(491),alt:"Build"}})])]),t._v(" "),s("li",[s("p",[t._v("debug")]),t._v(" "),s("p",[t._v("To run and debug your project, open "),s("code",[t._v("main.cpp")]),t._v(" and put a breakpoint on the "),s("code",[t._v("std::cout")]),t._v(" line. Then open the Command Palette (Ctrl+Shift+P) and run "),s("strong",[t._v("CMake: Debug")]),t._v(". The debugger will stop on the "),s("code",[t._v("std::cout")]),t._v(" line:")]),t._v(" "),s("p",[s("img",{attrs:{src:e(492),alt:"Debug"}})])])]),t._v(" "),s("h2",{attrs:{id:"如何添加调试参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何添加调试参数"}},[t._v("#")]),t._v(" 如何添加调试参数")]),t._v(" "),s("p",[t._v("在 launch.json 的 configurations.args中添加:")]),t._v(" "),s("div",{staticClass:"language-json extra-class"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"configurations"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v('"args"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-arg1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-arg2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value2"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("这种方式对与cmake无效")])]),t._v(" "),s("p",[t._v("添加cmake调试参数, 在settings.json中添加如下配置:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# settings.json")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cmake.debugConfig"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"args"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-k"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"25"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-p"')]),t._v(", \n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-f"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("/home/sheng/workspace/chia/chiapos-debug/plots/plots.dat"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-d"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/sheng/workspace/chia/chiapos-debug/plots"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-t"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/home/sheng/workspace/chia/chiapos-debug/tmp/plots"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-m"')]),t._v(", "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v("0x1234"),s("span",{pre:!0,attrs:{class:"token entity",title:'\\"'}},[t._v('\\"')]),t._v('"')]),t._v(",\n            "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"create"')]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("https://github.com/microsoft/vscode-cmake-tools/issues/121")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://code.visualstudio.com/docs/cpp/config-linux",target:"_blank",rel:"noopener noreferrer"}},[t._v("Using C++ on Linux in VS Code"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=n.exports}}]);