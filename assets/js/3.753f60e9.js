(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{435:function(t,a,s){t.exports=s.p+"assets/img/image-20210707230250817.c73da283.png"},436:function(t,a,s){t.exports=s.p+"assets/img/image-20210707230646431.dd58a972.png"},437:function(t,a,s){t.exports=s.p+"assets/img/image-20210707231117170.e49bfde6.png"},438:function(t,a,s){t.exports=s.p+"assets/img/image-20210707231153172.d3de4c34.png"},439:function(t,a,s){t.exports=s.p+"assets/img/image-20210707234101304.7b05b649.png"},440:function(t,a,s){t.exports=s.p+"assets/img/image-20210707234244206.b1dcf4e5.png"},441:function(t,a,s){t.exports=s.p+"assets/img/image-20210707234440359.891dc4f2.png"},442:function(t,a,s){t.exports=s.p+"assets/img/image-20210707234612353.201c593f.png"},443:function(t,a,s){t.exports=s.p+"assets/img/image-20210707235147826.df554420.png"},444:function(t,a,s){t.exports=s.p+"assets/img/image-20210707235926150.6762cffe.png"},445:function(t,a,s){t.exports=s.p+"assets/img/image-20210708000146400.7a649715.png"},446:function(t,a,s){t.exports=s.p+"assets/img/image-20210708000216452.c5141faa.png"},447:function(t,a,s){t.exports=s.p+"assets/img/image-20210708225956845.122258b5.png"},448:function(t,a,s){t.exports=s.p+"assets/img/image-20210708230428087.16409135.png"},449:function(t,a,s){t.exports=s.p+"assets/img/image-20210708231047622.9bf34f6a.png"},450:function(t,a,s){t.exports=s.p+"assets/img/image-20210708231140517.96b24f5f.png"},451:function(t,a,s){t.exports=s.p+"assets/img/image-20210708231803885.f299a727.png"},452:function(t,a,s){t.exports=s.p+"assets/img/image-20210708231830173.3bbd2c45.png"},453:function(t,a,s){t.exports=s.p+"assets/img/image-20210708232219172.4978cfd4.png"},454:function(t,a,s){t.exports=s.p+"assets/img/image-20210708232231965.ded0572f.png"},455:function(t,a,s){t.exports=s.p+"assets/img/image-20210708232820771.9955cb2d.png"},456:function(t,a,s){t.exports=s.p+"assets/img/image-20210708233331174.4355b3a0.png"},457:function(t,a,s){t.exports=s.p+"assets/img/image-20210708233407365.14fb8f05.png"},458:function(t,a,s){t.exports=s.p+"assets/img/image-20210708233603447.ea92faf9.png"},459:function(t,a,s){t.exports=s.p+"assets/img/image-20210708234008619.b334f97d.png"},460:function(t,a,s){t.exports=s.p+"assets/img/image-20210708234030392.45f3aee8.png"},461:function(t,a,s){t.exports=s.p+"assets/img/image-20210708234333325.c713236b.png"},462:function(t,a,s){t.exports=s.p+"assets/img/image-20210708234844032.2ee6b76b.png"},463:function(t,a,s){t.exports=s.p+"assets/img/image-20210708235034898.2a0e49a9.png"},464:function(t,a,s){t.exports=s.p+"assets/img/image-20210708235725546.07e18348.png"},465:function(t,a,s){t.exports=s.p+"assets/img/image-20210708235825426.313dca52.png"},466:function(t,a,s){t.exports=s.p+"assets/img/image-20210708235847816.bf53fffb.png"},532:function(t,a,s){"use strict";s.r(a);var e=s(20),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_10-io"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-io"}},[t._v("#")]),t._v(" 10 IO")]),t._v(" "),e("p",[t._v("关键点：")]),t._v(" "),e("ul",[e("li",[t._v("理解流")]),t._v(" "),e("li",[t._v("知道字节流和字符流的区别")]),t._v(" "),e("li",[t._v("知道字节流和字符流")]),t._v(" "),e("li",[t._v("知道预定义流（predifined streams)")]),t._v(" "),e("li",[t._v("使用 try-with-resources自动关闭文件流")]),t._v(" "),e("li",[t._v("读写二进制数据")]),t._v(" "),e("li",[t._v("随机访问文件")])]),t._v(" "),e("p",[t._v("Java的I/O系统很庞大，包含很多类、接口和方法。因此Java定义了两个 I/O 系统：一个是用于字节的 I/O系统，另一个是用于字符的I/O系统。")]),t._v(" "),e("p",[t._v("I/O类支持基于文本的控制台I/O 和文件I/O。它们不是用于创建GUI的。因此，它们不能用于创建桌面应用。")]),t._v(" "),e("h2",{attrs:{id:"java的i-o是基于流-streams-构建的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java的i-o是基于流-streams-构建的"}},[t._v("#")]),t._v(" Java的I/O是基于流（Streams）构建的")]),t._v(" "),e("p",[t._v("java通过流类执行I/O。一个I/O流要么是生产数据，要么消费数据。")]),t._v(" "),e("p",[t._v("一个流会通过Java I/O系统链接到一个物理设备。所有的流的行为都是一样的，即使它们链接的物理设备可能不同。因此，相同的的I/O类和方法可以应用于不同类型的设备。例如，往控制台写入的数据的方法也可以往磁盘上 文件写入数据。Java实现I/O流的类定义在 java.io包中。")]),t._v(" "),e("h2",{attrs:{id:"字节流和字符流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节流和字符流"}},[t._v("#")]),t._v(" 字节流和字符流")]),t._v(" "),e("p",[t._v("字节流： 处理字节的输入和输出。例如，用于读取二进制数据，在处理文件时很有用。")]),t._v(" "),e("p",[t._v("字符流：处理字符的输入和输出。使用Unicode，因此可以被国际化。还有，在某些情况下，字符流比字节流的效率更高。")]),t._v(" "),e("p",[t._v("Java定义了两种不同类型的流，这使得I/O系统相当庞大，因为需要两套独立的类层次结构（一套用于字节，一套用于字符）。I/O类的庞大数量会使I/O系统看起来比实际情况更令人生畏。请记住，在大多数情况下，字节流的功能与字符流的功能是相同的。")]),t._v(" "),e("p",[t._v("还有一点。在最底层，所有的I/O仍然是面向字节的。基于字符的流只是为处理字符提供了一种方便和有效的手段。")]),t._v(" "),e("h2",{attrs:{id:"字节流类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节流类"}},[t._v("#")]),t._v(" 字节流类")]),t._v(" "),e("p",[t._v("字节流是通过使用两个类层次结构来定义的。这些层次结构的顶层是两个抽象类："),e("strong",[t._v("InputStream")]),t._v(" 和 "),e("strong",[t._v("OutputStream")]),t._v(" . InputStream定义了字节输入流的共同特征，OutputStream描述了字节输出流的行为。")]),t._v(" "),e("p",[t._v("InputStream 和 OutputStream可以由多种不同的具体实现类创建:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(435),alt:"image-20210707230250817"}})]),t._v(" "),e("h2",{attrs:{id:"字符流类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符流类"}},[t._v("#")]),t._v(" 字符流类")]),t._v(" "),e("p",[t._v("字符流是通过使用两个类的层次结构来定义的，这两个抽象类是最顶层的:"),e("strong",[t._v("Reader")]),t._v(" 和 "),e("strong",[t._v("Writer")]),t._v("。"),e("strong",[t._v("Reader")]),t._v(" 用于输入，而"),e("strong",[t._v("Writer")]),t._v("用于输出。从Reader和Writer派生的具体类对Unicode字符流进行操作")]),t._v(" "),e("p",[t._v("从Reader和Writer衍生出几个具体的子类，处理各种I/O情况。一般来说，基于字符的类与基于字节的类并行。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(436),alt:"image-20210707230646431"}})]),t._v(" "),e("h2",{attrs:{id:"预定义流-predefined-streams"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#预定义流-predefined-streams"}},[t._v("#")]),t._v(" 预定义流（Predefined Streams)")]),t._v(" "),e("p",[t._v("如你所知，所有的Java程序都自动导入java.lang包。这个包定义了一个叫做"),e("strong",[t._v("System")]),t._v("的类，它封装了运行时环境的几个方面。在其他方面，它包含三个预定义的流变量，称为in、out和err。这些字段在System中被声明为public、final和static。这意味着它们可以被你程序的任何其他部分使用，而且不需要引用特定的System对象。")]),t._v(" "),e("p",[t._v("System.out指的是标准输出流。默认情况下，这就是控制台。System.in指的是标准输入，默认情况下是指键盘。System.err指的是标准错误流，默认情况下，它也是控制台。然而，这些数据流可以被重定向到任何兼容的I/O设备。")]),t._v(" "),e("p",[t._v("System.in是一个InputStream类型的对象；System.out和System.err是PrintStream类型的对象。这些都是字节流，尽管它们通常被用来从控制台读写字符。它们是字节流而不是字符流的原因是，预定义的流是Java原始规范的一部分，它不包括字符流。正如你将看到的，如果需要的话，可以将这些包在基于字符的流中。")]),t._v(" "),e("h2",{attrs:{id:"使用字节流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用字节流"}},[t._v("#")]),t._v(" 使用字节流")]),t._v(" "),e("p",[t._v("一般来说，InputStream和OutputStream中的方法出错时可以抛出一个IOException。这两个抽象类所定义的方法对其所有的子类都是可用的。因此，它们构成了所有字节流将拥有的最小的I/O函数集。")]),t._v(" "),e("p",[t._v("InputStream定义的方法：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(437),alt:"image-20210707231117170"}})]),t._v(" "),e("p",[t._v("OutputStream定义的方法:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(438),alt:"image-20210707231153172"}})]),t._v(" "),e("h3",{attrs:{id:"读取控制台输入"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取控制台输入"}},[t._v("#")]),t._v(" 读取控制台输入")]),t._v(" "),e("p",[t._v("最初，执行控制台输入的唯一方法是使用字节流，而且许多Java代码仍然完全使用字节流。今天，你可以使用字节流或字符流。对于商业代码来说，读取控制台输入的首选方法是使用一个字符流。这样做使你的程序更容易国际化，更容易维护。直接对字符进行操作也更方便，而不是在字符和字节之间来回转换。然而，对于样例程序、你自己使用的简单实用程序以及处理原始键盘输入的应用程序，使用字节流是可以接受的。出于这个原因，这里将研究使用字节流的控制台I/O。")]),t._v(" "),e("p",[t._v("因为System.in是InputStream的一个实例，你可以自动访问InputStream定义的方法。这意味着，例如，你可以使用read( )方法从System.in中读取字节。有三个版本的 read( )，如下:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("在第三章中，你看到了如何使用第一个版本的read( )从键盘（从System.in）上读取一个字符。当试图在流的末端读取时，它返回-1。第二个版本从输入流中读取字节，并将它们放入数据中，直到数组满了，到达流的末端，或者发生错误。它返回读取的字节数，或者当试图在流的末端读取时返回-1。第三个版本是将输入的数据从start指定的位置开始读入,最多可存储max个字节。它返回读取的字节数，或者当试图在流的末端读取时返回-1。当发生错误时都会抛出一个IOException。")]),t._v(" "),e("p",[t._v("示例代码:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" data "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Enter some characters:"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 读取控制台输入的数据")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("in"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"You entered: "')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v(" e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        e"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("printStackTrace")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"向控制台写入数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向控制台写入数据"}},[t._v("#")]),t._v(" 向控制台写入数据")]),t._v(" "),e("p",[t._v("使用 "),e("code",[t._v("write(int byteal)")]),t._v(" 方法")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("你不会经常使用write( )来执行控制台输出（尽管它在某些情况下可能很有用），因为print( )和println( )更容易使用。")]),t._v(" "),e("p",[t._v("PrintStream提供了两个额外的输出方法：printf( ) 和 format( )。这两个方法都能让你详细控制你输出的数据的精确格式。例如，你可以指定显示的小数点位数，最小字段宽度，或负值的格式。")]),t._v(" "),e("h3",{attrs:{id:"使用字节流读写文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用字节流读写文件"}},[t._v("#")]),t._v(" 使用字节流读写文件")]),t._v(" "),e("p",[t._v("Java提供了许多允许你读写文件的类和方法。当然，最常见的文件类型是磁盘文件。在Java中，所有的文件都是面向字节的，Java提供了从文件中读取和写入字节的方法。因此，使用字节流读写文件是非常普遍的。然而，Java允许你将一个面向字节的文件流包裹在一个基于字符的对象中，这将在本章的后面展示。")]),t._v(" "),e("p",[t._v("要创建一个链接到文件的字节流，使用"),e("strong",[t._v("FileInputStream")]),t._v("或FileOutputStream。要打开一个文件，只需创建这两个类中的一个对象，指定文件名作为构造函数的一个参数。一旦文件被打开，你就可以从它那里读取或写入。")]),t._v(" "),e("h4",{attrs:{id:"读取一个文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取一个文件"}},[t._v("#")]),t._v(" 读取一个文件")]),t._v(" "),e("p",[t._v("通过创建一个"),e("strong",[t._v("FileInputStream")]),t._v("对象来打开一个文件来进行读取。下面是一个常用的构造函数：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileInputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n")])])]),e("p",[t._v("要读取文件，可以使用"),e("strong",[t._v("read( )")]),t._v(" 方法，这里使用的方法是:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("每次调用时，**read( )**从文件中读取一个字节，并将其作为一个整数值返回。当遇到文件的末端时，它返回-1。当发生错误时，它会抛出一个IOException。因此，这个版本的read( )与用于从控制台读取的版本是一样的。")]),t._v(" "),e("p",[t._v("当你用完一个文件后，你必须通过调用**close( )**来关闭它。它的一般形式是:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("close")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v('关闭一个文件可以释放分配给该文件的系统资源，允许它们被其他文件使用。不关闭一个文件可能导致 "内存泄漏"，因为未使用的资源仍然被分配。')]),t._v(" "),e("p",[t._v("下面的程序使用read( )来输入和显示一个文本文件的内容，该文件的名称被指定为一个命令行参数。注意try/catch块如何处理可能发生的I/O错误：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(439),alt:"image-20210707234101304"}})]),t._v(" "),e("p",[t._v("注意，前面的例子在读取文件的try块完成后关闭了文件流。尽管这种方法偶尔会有用，但Java支持一种变体，它往往是更好的选择。这个变体是在一个finally块中调用close( )。在这种方法中，所有访问文件的方法都包含在一个try块中，finally块被用来关闭文件。这样一来，无论try块如何终止，文件都会被关闭。假设前面的例子，下面是对读取文件的try块的重新编码。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(440),alt:"image-20210707234244206"}})]),t._v(" "),e("p",[t._v("这种方法的一个好处是，如果访问文件的代码因为一些与I/O无关的异常而终止，文件仍然被Final块关闭。虽然在这个例子（或大多数其他例子程序）中不是一个问题，因为如果一个意外的异常发生，程序就会简单地结束，但在较大的程序中这可能是一个主要的麻烦来源。使用finally可以避免这种麻烦。")]),t._v(" "),e("p",[t._v("有时，将程序中打开文件和访问文件的部分包裹在一个try块中（而不是将两者分开），然后用一个Final块来关闭文件，这样会更容易。例如，这里有另一种写ShowFile程序的方法：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(441),alt:"image-20210707234440359"}})]),t._v(" "),e("p",[t._v("在这种方法中，注意fin被初始化为null。然后，在Final块中，只有当fin不为null时，才会关闭文件。这样做的原因是，只有当文件被成功打开时，fin才是非空的。因此，如果在打开文件时发生异常，close( )将不会被调用。")]),t._v(" "),e("p",[t._v("可以让前面的例子中的try/catch序列更紧凑一些。因为FileNotFoundException是IOException的一个子类，所以不需要单独捕获它。例如，这个catch子句可以用来捕获这两个异常，不需要再单独捕获FileNotFoundException。在这种情况下，会显示描述错误的标准异常消息：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(442),alt:"image-20210707234612353"}})]),t._v(" "),e("h4",{attrs:{id:"向文件写入数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向文件写入数据"}},[t._v("#")]),t._v(" 向文件写入数据")]),t._v(" "),e("p",[t._v("打开一个文件用于写入数据，创建一个 FileOutputStream 对象。下面是两个常用的构造器:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileOutputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" append"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n")])])]),e("p",[t._v("如果文件不能被创建，就会抛出FileNotFoundException。在第一种形式中，当一个输出文件被打开时，任何预先存在的同名文件都被销毁。在第二种形式中，如果append为真，那么输出被附加到文件的末尾。否则，该文件被覆盖。")]),t._v(" "),e("p",[t._v("向文件中写入数据，使用 write() 方法，其一般形式如下:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" byteval"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("该方法将byteval指定的字节写到文件中。尽管byteval被声明为一个整数，但只有低阶的8位会被写入文件。如果在写入过程中发生错误，会抛出一个IOException。")]),t._v(" "),e("p",[t._v("一旦写入完成，也需要调用 close() 方法关闭流。")]),t._v(" "),e("p",[t._v("示例:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(443),alt:"image-20210707235147826"}})]),t._v(" "),e("h4",{attrs:{id:"自动关闭一个文件流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动关闭一个文件流"}},[t._v("#")]),t._v(" 自动关闭一个文件流")]),t._v(" "),e("p",[t._v("自动关闭文件流基于另一种形式的try语句："),e("em",[t._v("try-with-resources")]),t._v("，有时也表示 "),e("em",[t._v("自动资源管理（automatic resource management）")])]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("resource"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("specification"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// use the resource")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("通常  "),e("em",[t._v("resource-specification")]),t._v(" 是一个声明并初始化资源的语句，例如，一个文件。.在这种情况下，它由一个变量声明组成，其中变量被初始化为对被管理对象的引用。当try块结束时，资源被自动释放。在文件的情况下，这意味着该文件被自动关闭。因此，不需要显示的调用close( )）。Try-with-resources 语句也可以包括 catch 和 finally 子句。")]),t._v(" "),e("blockquote",[e("p",[t._v("注意")]),t._v(" "),e("p",[t._v("从JDK 9开始，try的资源规范也可以由一个在程序中早先声明和初始化的变量组成。然而，该变量必须是"),e("em",[t._v("有效的最终变量(effectively final)")]),t._v("，也就是说，它在被赋予初始值后没有被分配新的值。")]),t._v(" "),e("p",[t._v("try-with-resources语句只能用于那些实现java.lang定义的AutoCloseable接口的资源。这个接口定义了close( )方法。AutoCloseable由java.io中定义的Closeable接口继承，这两个接口都由流类实现，包括FileInputStream和FileOutputStream。因此，在处理流（包括文件流）时，可以使用try-with-resources。")])]),t._v(" "),e("p",[t._v("作为自动关闭文件的第一个例子，这里有一个使用它的ShowFile程序的改版：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(444),alt:"image-20210707235926150"}})]),t._v(" "),e("p",[t._v("重要的是要理解在 try 语句中声明的资源是隐式的final资源。这意味着你不能在资源被创建后对其进行赋值。另外，资源的范围仅限于try-with-resources语句。")]),t._v(" "),e("p",[t._v("在继续之前，有必要提一下，从JDK 10开始，你可以使用局部变量类型推理来指定try-with-resources语句中声明的资源的类型。要做到这一点，将类型指定为var。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(445),alt:"image-20210708000146400"}})]),t._v(" "),e("p",[t._v("你可以在一个try语句中管理一个以上的资源。要做到这一点，只需用一个分号将每个资源规范分开。下面的程序显示了一个例子。它重新设计了前面显示的CopyFile程序，使其使用一条try-with-resources语句来管理fin和fout。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(446),alt:"image-20210708000216452"}})]),t._v(" "),e("p",[t._v('关于 try-with-resources，还有一个需要提及的方面。一般来说，当一个try块执行时，try块内的异常有可能会导致另一个异常，这个异常在final子句中关闭资源时发生。在 "正常 "的try语句中，原来的异常会丢失，被第二个异常所抢占。然而，在try-with-resources语句中，第二个异常被抑制了。然而，它并没有丢失。相反，它被添加到与第一个异常相关的被抑制的异常列表中。被抑制的异常列表可以通过使用 Throwable 定义的 getSuppressed( ) 方法获得。')]),t._v(" "),e("p",[t._v("由于它的优点，本章中的其余例子将使用try-with-resources。然而，熟悉前面所示的传统方法仍然非常重要，在这种方法中，close( )被显式调用。这有几个原因。首先，你可能会遇到仍然依赖传统方法的遗留代码。在维护或更新这些旧代码时，所有的Java程序员都必须完全熟悉并适应传统方法。第二，你可能需要在JDK 7之前的环境中工作。在这种情况下，try-with-resources 语句将不可用，必须采用传统方法。最后，在某些情况下，明确地关闭一个资源比自动方法更合适。尽管有上述情况，如果你使用的是现代版本的Java，那么你通常会想使用自动化方法来管理资源。它为传统方法提供了一个精简的、强大的替代方案。")]),t._v(" "),e("h4",{attrs:{id:"读写二进制数据"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读写二进制数据"}},[t._v("#")]),t._v(" 读写二进制数据")]),t._v(" "),e("p",[t._v("DataOutputStream实现了DataOutput接口。这个接口定义了将所有Java的原始类型写到文件中的方法。重要的是要明白，这些数据是用其内部的二进制格式写入的，而不是人类可读的文本形式。下表中显示了几个常用于 Java 原始类型的输出方法。每个方法在失败时都会抛出一个IOException。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(447),alt:"image-20210708225956845"}})]),t._v(" "),e("p",[t._v("DataOutputStream的构造器如下,:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataOutputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutputStream")]),t._v(" outputStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("注意，它是建立在OutputStream实例上的 。")]),t._v(" "),e("p",[t._v("这里，outputStream是数据被写入的流。要把输出写到一个文件，你可以使用FileOutputStream创建的对象作为这个参数。")]),t._v(" "),e("p",[t._v("DataInputStream实现了DataInput接口，它提供了读取所有Java原始类型的方法。这些方法显示在下表中，每个方法都可以抛出一个 IOException。DataInputStream使用一个InputStream实例作为基础，在它上面覆盖了读取各种Java数据类型的方法。记住，DataInputStream 是以二进制格式读取数据，而不是以人类可读的形式。DataInputStream的构造函数如下：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DataInputStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" inputStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[e("img",{attrs:{src:s(448),alt:"image-20210708230428087"}})]),t._v(" "),e("p",[t._v("这里，inputStream是与正在创建的DataInputStream实例相连的流。要从一个文件中读取输入，你可以使用FileInputStream创建的对象作为这个参数。")]),t._v(" "),e("p",[t._v("示例代码:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(449),alt:"image-20210708231047622"}})]),t._v(" "),e("p",[t._v("程序输出结果如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(450),alt:"image-20210708231140517"}})]),t._v(" "),e("h3",{attrs:{id:"随机访问文件-random-access-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#随机访问文件-random-access-files"}},[t._v("#")]),t._v(" 随机访问文件(Random-Access Files)")]),t._v(" "),e("p",[t._v("到目前为止，我们一直在使用顺序文件，即以严格的线性方式访问文件，一个字节接着一个字节。然而，Java也允许你以随机顺序访问文件的内容。要做到这一点，你将使用RandomAccessFile，它封装了一个随机访问的文件。RandomAccessFile 不是从 InputStream 或 OutputStream 派生出来的。相反，它实现了 DataInput 和 DataOutput 接口，它们定义了基本的 I/O 方法。它还支持定位请求--也就是说，你可以在文件中定位文件指针。我们将使用的构造函数如下：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomAccessFile")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" access"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n")])])]),e("p",[t._v("这里，"),e("em",[t._v("fileName")]),t._v("是文件名，"),e("em",[t._v("access")]),t._v('决定了允许何种类型的文件访问。如果是 "r"，该文件可以被读取，但不能被写入。如果是 "rw"，该文件以读写模式打开。访问参数还支持 "rws "和 "rwd"，（对于本地设备）确保对文件的修改立即写入物理设备）。')]),t._v(" "),e("p",[t._v("*seek( )*方法可以用来设置文件指针在文件中的当前位置:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("seek")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" newPos"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("这里，newPos指定了文件指针从文件开始的新位置，单位是字节。在调用 seek( )后，下一次读或写操作将在新的文件位置发生。")]),t._v(" "),e("p",[t._v("因为RandomAccessFile实现了DataInput和DataOuput接口，所以读取和写入原始类型的方法，例如readInt( )和writeDouble( )，都是可用的。read( )和write( )方法也被支持。")]),t._v(" "),e("p",[t._v("下面是一个演示随机访问I/O的例子。它向一个文件写了六个double类型的数，然后以非顺序的方式读回来。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(451),alt:"image-20210708231803885"}})]),t._v(" "),e("p",[t._v("输出结果如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(452),alt:"image-20210708231830173"}})]),t._v(" "),e("p",[t._v("注意每个值是如何定位的。由于每个double值都有8个字节，每个值都从8个字节的边界开始。因此，第一个值位于0，第二个值从字节8开始，第三个值从字节16开始，以此类推。因此，要读取第四个值，程序要寻找位置24。")]),t._v(" "),e("h2",{attrs:{id:"使用字符流"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用字符流"}},[t._v("#")]),t._v(" 使用字符流")]),t._v(" "),e("p",[t._v("正如前面几节所示，Java的字节流既强大又灵活。然而，它们并不是处理基于字符的I/O的理想方式。为了这个目的，Java定义了字符流类。在字符流层次结构的顶端是抽象类Reader和Writer。表10-7显示了Reader的方法，表10-8显示了Writer的方法。大多数方法在出错时可以抛出一个IOException。这两个抽象类所定义的方法对它们所有的子类都是可用的。因此，它们构成了所有字符流将拥有的最小的I/O函数集。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(453),alt:"image-20210708232219172"}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(454),alt:"image-20210708232231965"}})]),t._v(" "),e("h3",{attrs:{id:"读取控制台输入-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取控制台输入-2"}},[t._v("#")]),t._v(" 读取控制台输入")]),t._v(" "),e("p",[t._v("对于将被国际化的代码来说，使用Java的基于字符的流从控制台输入是一种更好、更方便的从键盘上读取字符的方式，而不是使用字节流。然而，由于System.in是一个字节流，你需要将System.in包裹在某种类型的Reader中。读取控制台输入的最佳类是BufferedReader，它支持缓冲的输入流。然而，你不能直接从System.in构造一个BufferedReader。相反，你必须先把它转换成一个字符流。为了做到这一点，你将使用InputStreamReader，它可以"),e("strong",[t._v("将字节转换为字符")]),t._v("。要获得一个与System.in链接的InputStreamReader对象，请使用下面所示的构造函数:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStreamReader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InputStream")]),t._v(" inputStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("因为System.in指的是InputStream类型的对象，所以它可以用于"),e("em",[t._v("inputStream")]),t._v("。")]),t._v(" "),e("p",[t._v("接下来，使用InputStreamReader产生的对象，用这里显示的构造函数构造一个BufferedReader：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BufferedReader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Reader")]),t._v(" inputReader"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("这里，"),e("em",[t._v("inputReader")]),t._v("是链接到正在创建的BufferedReader实例的流。把这一切放在一起，下面这行代码创建了一个连接到键盘的BufferedReader：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(455),alt:"image-20210708232820771"}})]),t._v(" "),e("p",[t._v("该语句执行后，br将成为一个基于字符的流，通过System.in链接到控制台。")]),t._v(" "),e("h3",{attrs:{id:"读取字符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取字符"}},[t._v("#")]),t._v(" 读取字符")]),t._v(" "),e("p",[t._v("使用BufferedReader定义的read( )方法可以从System.in中读取字符，与使用字节流读取字符的方式基本相同。下面是BufferedReader支持的三个版本的read( ):")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" start"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" max"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("read( )的第一个版本读取一个单一的Unicode字符。当试图在流的末端读取时，它返回-1。第二个版本从输入流中读取字符，并将它们放入data中，直到数组满了，或者到达流的末端，或者发生错误。当试图在流的末端读取时，它返回读取的字符数或-1。第三个版本是将输入的数据从start指定的位置开始读入。最多可以存储max个字符。当试图在流的末端读取时，它返回读取的字符数或-1。如果出错，都会抛出一个IOException。")]),t._v(" "),e("p",[t._v("下面的程序通过从控制台读取字符来演示read( )，直到用户输入一个句号。注意，任何可能产生的I/O异常都被简单地抛出main( )。正如本章前面提到的，这种方法在从控制台读取字符时很常见。当然，如果你选择的话，你可以在程序控制下处理这些类型的错误。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(456),alt:"image-20210708233331174"}})]),t._v(" "),e("p",[t._v("运行示例:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(457),alt:"image-20210708233407365"}})]),t._v(" "),e("h3",{attrs:{id:"读取字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#读取字符串"}},[t._v("#")]),t._v(" 读取字符串")]),t._v(" "),e("p",[t._v("要从键盘上读取一个字符串，请使用readLine( )的版本，它是BufferedReader类的成员。它的一般形式在这里显示:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("readLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("它返回一个包含所读字符的String对象。如果试图在流的末端进行读取，则返回"),e("strong",[t._v("null")]),t._v("。")]),t._v(" "),e("p",[t._v('下面的程序演示了BufferedReader和readLine( )方法。该程序读取并显示几行文本，直到你输入 "stop "一词。')]),t._v(" "),e("p",[e("img",{attrs:{src:s(458),alt:"image-20210708233603447"}})]),t._v(" "),e("h3",{attrs:{id:"向控制台写入数据-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向控制台写入数据-2"}},[t._v("#")]),t._v(" 向控制台写入数据")]),t._v(" "),e("p",[t._v("虽然在Java下仍然允许使用System.out向控制台写程序，但建议主要用于调试目的，或用于样本程序，如本书中的程序。对于现实世界的程序来说，在使用Java时，向控制台写入的首选方法是通过"),e("strong",[t._v("PrintWriter")]),t._v("流。"),e("strong",[t._v("PrintWriter")]),t._v("是基于字符的类中的一个。正如所解释的那样，使用基于字符的类进行控制台输出可以使你的程序更容易国际化。")]),t._v(" "),e("p",[t._v("PrintWriter定义了几个构造函数。我们将使用的一个构造函数在这里显示:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("PrintWriter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OutputStream")]),t._v(" outputStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" flushingOn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("在这里，"),e("em",[t._v("outputStream")]),t._v("是一个"),e("strong",[t._v("OutputStream")]),t._v("类型的对象，"),e("em",[t._v("flushingOn")]),t._v("控制Java是否在每次调用println( )方法（包括其他方法）时冲刷输出流。如果"),e("em",[t._v("flushingOn")]),t._v("为true，则自动刷新。如果是false，则不自动刷新。")]),t._v(" "),e("p",[e("strong",[t._v("PrintWriter")]),t._v("支持所有类型的**print( )"),e("strong",[t._v("和")]),t._v("println( )**方法，包括Object。因此，你可以以与System.out相同的方式使用这些方法。"),e("strong",[t._v("如果一个参数不是原始类型，PrintWriter方法将调用对象的toString( ) 方法，然后打印出结果")]),t._v("。")]),t._v(" "),e("p",[t._v("要使用PrintWriter写到控制台，指定System.out为输出流，并在每次调用println( )后刷新该流。例如，这行代码创建了一个连接到控制台输出的PrintWriter：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(459),alt:"image-20210708234008619"}})]),t._v(" "),e("p",[t._v("下面的应用程序说明了使用PrintWriter来处理控制台输出:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(460),alt:"image-20210708234030392"}})]),t._v(" "),e("p",[t._v("输出结果如下：")]),t._v(" "),e("p",[e("img",{attrs:{src:s(461),alt:"image-20210708234333325"}})]),t._v(" "),e("p",[t._v("请记住，当你学习Java或调试程序时，使用System.out来写简单的文本输出到控制台并没有错。然而，使用PrintWriter将使你的真实世界的应用程序更容易被国际化。由于在本书所示的示例程序中使用PrintWriter并没有什么好处，为了方便起见，我们将继续使用System.out向控制台写入文本。")]),t._v(" "),e("h3",{attrs:{id:"使用字符流的文件i-o"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用字符流的文件i-o"}},[t._v("#")]),t._v(" 使用字符流的文件I/O")]),t._v(" "),e("p",[t._v("虽然面向字节的文件处理通常是最常见的，但也可以使用基于字符的流来实现这一目的。字符流的优点是，它们直接对Unicode字符进行操作。因此，如果你想存储Unicode文本，字符流当然是你最好的选择。一般来说，为了执行基于字符的文件I/O，你将使用"),e("strong",[t._v("FileReader")]),t._v("和"),e("strong",[t._v("FileWriter")]),t._v("类。")]),t._v(" "),e("h4",{attrs:{id:"使用filewriter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用filewriter"}},[t._v("#")]),t._v(" 使用FileWriter")]),t._v(" "),e("p",[e("strong",[t._v("FileWriter")]),t._v("创建了一个"),e("strong",[t._v("Writer")]),t._v("，你可以用它来向文件写入。这里显示了两个常用的构造函数：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileWriter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileWriter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" append"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IOException")]),t._v("\n")])])]),e("p",[t._v("这里，"),e("em",[t._v("fileName")]),t._v("是一个文件的完整路径名称。如果append为true，那么输出将被追加到文件的末尾。否则，该文件被覆盖。如果失败，则抛出一个IOException。"),e("strong",[t._v("FileWriter")]),t._v("衍生自"),e("strong",[t._v("OutputStreamWriter")]),t._v("和"),e("strong",[t._v("Writer")]),t._v("。因此，它可以访问这些类所定义的方法。")]),t._v(" "),e("p",[t._v('这是一个简单的键对磁盘工具，它读取在键盘上输入的文本行，并将它们写入一个名为 "test.txt "的文件中。文本一直被读取，直到用户输入 "stop "一词。它使用一个FileWriter来输出到该文件。')]),t._v(" "),e("p",[e("img",{attrs:{src:s(462),alt:"image-20210708234844032"}})]),t._v(" "),e("h4",{attrs:{id:"使用filereader"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用filereader"}},[t._v("#")]),t._v(" 使用FileReader")]),t._v(" "),e("p",[t._v("FileReader类创建了一个Reader，你可以用它来读取一个文件的内容。这里显示了一个常用的构造函数：")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileReader")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" fileName"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FileNotFoundException")]),t._v("\n")])])]),e("p",[t._v("这里，"),e("em",[t._v("fileName")]),t._v("是一个文件的完整路径名称。如果文件不存在，它会抛出一个FileNotFoundException。"),e("strong",[t._v("FileReader")]),t._v("派生于"),e("strong",[t._v("InputStreamReader")]),t._v("和Reader。因此，它可以访问这些类所定义的方法。")]),t._v(" "),e("p",[t._v('下面的程序创建了一个简单的磁盘到屏幕的工具，它读取一个名为 "test.txt "的文本文件并在屏幕上显示其内容。因此，它是上一节中所示的键到磁盘工具的补充。')]),t._v(" "),e("p",[e("img",{attrs:{src:s(463),alt:"image-20210708235034898"}})]),t._v(" "),e("p",[t._v("在这个例子中，注意到FileReader被包裹在一个"),e("strong",[t._v("BufferedReader")]),t._v("中。这使得它可以访问readLine( )。另外，关闭BufferedReader，在这个例子中，br会自动关闭该文件。")]),t._v(" "),e("h2",{attrs:{id:"使用java的类型包装器转换数字字符串"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用java的类型包装器转换数字字符串"}},[t._v("#")]),t._v(" 使用Java的类型包装器转换数字字符串")]),t._v(" "),e("p",[t._v('在离开I/O主题之前，我们将研究一个在读取数字字符串时有用的技术。如你所知，Java的println( )方法提供了一种方便的方式来向控制台输出各种类型的数据，包括内置类型的数字值，如int和double。因此，println( )会自动将数值转换成人类可读的形式。然而，像read( )这样的方法并没有提供一个平行的功能来读取并将包含数字值的字符串转换为其内部的二进制格式。例如，没有任何版本的read( )可以读取诸如 "100 "这样的字符串，然后自动将其转换为能够存储在int变量中的相应二进制值。相反，Java提供了各种其他方法来完成这一任务。也许最简单的是使用Java的一个类型包装器。')]),t._v(" "),e("p",[t._v("Java的类型包装器是对原始类型进行封装或包装的类。之所以需要类型包装器，是因为原始类型不是对象。这在一定程度上限制了它们的使用。例如，原始类型不能通过引用传递。为了解决这种需要，Java提供了对应于每个原始类型的类。")]),t._v(" "),e("p",[t._v("这些类型包装器是Double、Float、Long、Integer、Short、Byte、Character和Boolean。这些类提供了大量的方法，允许你将原始类型完全整合到Java的对象层次结构中。作为一个附带的好处，数字包装器还定义了将数字字符串转换为其相应的二进制等价物的方法。这里显示了其中几个转换方法。每个方法都返回一个与字符串对应的二进制值。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(464),alt:"image-20210708235725546"}})]),t._v(" "),e("p",[t._v("整数包装器还提供了第二种解析方法，允许你指定radix。")]),t._v(" "),e("p",[t._v("解析方法为我们提供了一种简单的方法，将从键盘或文本文件中以字符串形式读取的数字值转换为其适当的内部格式。例如，下面的程序演示了parseInt（ ）和parseDouble（ ）。它平均处理用户输入的数字列表。它首先询问用户要平均化的数值的数量。然后，它使用readLine( )读取该数字，并使用parseInt( )将该字符串转换为整数。接下来，它输入数值，使用parseDouble( )将字符串转换为其双倍数。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(465),alt:"image-20210708235825426"}})]),t._v(" "),e("p",[t._v("输出示例:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(466),alt:"image-20210708235847816"}})])])}),[],!1,null,null,null);a.default=n.exports}}]);