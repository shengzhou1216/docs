(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{479:function(t,a,s){t.exports=s.p+"assets/img/image-20210701234110090.40f4129e.png"},480:function(t,a,s){t.exports=s.p+"assets/img/image-20210701234204166.d01ecdad.png"},481:function(t,a,s){t.exports=s.p+"assets/img/image-20210701234436658.98d92fde.png"},482:function(t,a,s){t.exports=s.p+"assets/img/image-20210701234457141.9d45cd56.png"},483:function(t,a,s){t.exports=s.p+"assets/img/image-20210701235730310.8a087759.png"},484:function(t,a,s){t.exports=s.p+"assets/img/image-20210702000100256.d8efcf6f.png"},485:function(t,a,s){t.exports=s.p+"assets/img/image-20210702000111781.a717d770.png"},540:function(t,a,s){"use strict";s.r(a);var e=s(20),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_9-异常处理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-异常处理"}},[t._v("#")]),t._v(" 9 异常处理")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#异常层级"}},[t._v("异常层级")])]),e("li",[e("a",{attrs:{href:"#异常处理基础"}},[t._v("异常处理基础")]),e("ul",[e("li",[e("a",{attrs:{href:"#使用try-catch"}},[t._v("使用try catch")])]),e("li",[e("a",{attrs:{href:"#没有处理异常的后果"}},[t._v("没有处理异常的后果")])])])]),e("li",[e("a",{attrs:{href:"#抛出异常"}},[t._v("抛出异常")]),e("ul",[e("li",[e("a",{attrs:{href:"#重抛异常"}},[t._v("重抛异常")])])])]),e("li",[e("a",{attrs:{href:"#深入throwable"}},[t._v("深入Throwable")])]),e("li",[e("a",{attrs:{href:"#使用finally"}},[t._v("使用finally")])]),e("li",[e("a",{attrs:{href:"#使用throws"}},[t._v("使用throws")])]),e("li",[e("a",{attrs:{href:"#三个额外的异常功能"}},[t._v("三个额外的异常功能")]),e("ul",[e("li",[e("a",{attrs:{href:"#multi-catch"}},[t._v("multi-catch")])]),e("li",[e("a",{attrs:{href:"#more-precise-rethrow"}},[t._v("more precise rethrow")])])])]),e("li",[e("a",{attrs:{href:"#java内置异常"}},[t._v("Java内置异常")]),e("ul",[e("li",[e("a",{attrs:{href:"#unchecked-exception"}},[t._v("Unchecked Exception")])]),e("li",[e("a",{attrs:{href:"#checked-exception"}},[t._v("Checked Exception")])])])]),e("li",[e("a",{attrs:{href:"#自定义异常"}},[t._v("自定义异常")])])])]),e("p"),t._v(" "),e("p",[t._v("异常是运行时发生的错误。Java异常处理系统可以处理运行时异常。")]),t._v(" "),e("h2",{attrs:{id:"异常层级"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常层级"}},[t._v("#")]),t._v(" 异常层级")]),t._v(" "),e("p",[t._v("所有异常类派生于 Throwable。Throwable 有两个子类： Exception 和 Error。")]),t._v(" "),e("p",[t._v("Error是Java虚拟机中的错误，不是你的程序中的，通常不需要处理它们。")]),t._v(" "),e("p",[t._v("Exception是程序中的错误，通常需要处理此类错误。")]),t._v(" "),e("p",[t._v("Exception的一个重要的子类的 RuntimeException，它可以表示各种各样的运行时异常。")]),t._v(" "),e("h2",{attrs:{id:"异常处理基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#异常处理基础"}},[t._v("#")]),t._v(" 异常处理基础")]),t._v(" "),e("p",[t._v("使用try监控异常，如果try中出现异常，它会被抛出；可以使用catch来捕获异常，然后对异常进行处理。")]),t._v(" "),e("p",[t._v("系统产生的异常会自动被Java运行时系统抛出。如果要手动抛出异常，可以使用throw。在某些情况下，如果一个方法要抛出异常，必须通过 throws 指定 。finally 代码块中存放的是 try代码块一退出后就要执行的代码。")]),t._v(" "),e("h3",{attrs:{id:"使用try-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用try-catch"}},[t._v("#")]),t._v(" 使用try catch")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// block of code to monitor for errors")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExcepType1")]),t._v(" exOb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handler for ExcepType1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExcepType2")]),t._v(" exOb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// handler for ExcepType2")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("blockquote",[e("p",[t._v("catch块可以有多个；捕获到哪个异常，哪个catch代码块就执行，判断顺序是从上到下依次判断的")])]),t._v(" "),e("blockquote",[e("p",[t._v("注意: 还有一种形式的try语句,它支持自动资源管理，它就是: try-with-resources。这是用来管理I/O流的，之所以存在这种形式，是因为I/O资源是最常用的，具体情况后面再说。")])]),t._v(" "),e("h3",{attrs:{id:"没有处理异常的后果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#没有处理异常的后果"}},[t._v("#")]),t._v(" 没有处理异常的后果")]),t._v(" "),e("p",[t._v("处理异常有一个好处，就是：防止程序非正常终止。 如果一个异常抛出了，那么它必须被处理，否则它会被JVM捕获。而JVM默认的异常处理机制会终止程序的执行，并输出异常信息。因此，你需要自己处理异常，而不是依赖JVM帮你处理。")]),t._v(" "),e("p",[t._v("如果没有catch的异常类型与实际抛出的异常类型不匹配，那么该异常无法被捕获。")]),t._v(" "),e("h2",{attrs:{id:"抛出异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#抛出异常"}},[t._v("#")]),t._v(" 抛出异常")]),t._v(" "),e("p",[t._v("抛出异常一般形式:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" exceptOb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("exceptOb 必须派生自 Throwable;")]),t._v(" "),e("h3",{attrs:{id:"重抛异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#重抛异常"}},[t._v("#")]),t._v(" 重抛异常")]),t._v(" "),e("p",[t._v("被catch捕获的异常可以重新抛出。通常需要重抛的原因是允许多个异常处理器来处理此异常。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(479),alt:"image-20210701234110090"}})]),t._v(" "),e("h2",{attrs:{id:"深入throwable"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#深入throwable"}},[t._v("#")]),t._v(" 深入Throwable")]),t._v(" "),e("p",[t._v("所有异常都是Throwable的子类。Throwable常用方法如下:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(480),alt:"image-20210701234204166"}})]),t._v(" "),e("h2",{attrs:{id:"使用finally"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用finally"}},[t._v("#")]),t._v(" 使用finally")]),t._v(" "),e("p",[t._v("当try/catch执行完成后，finally会接着执行。即使 在 try/catch中使用了return，finally块也会执行。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(481),alt:"image-20210701234436658"}})]),t._v(" "),e("p",[t._v("输出结果:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(482),alt:"image-20210701234457141"}})]),t._v(" "),e("h2",{attrs:{id:"使用throws"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用throws"}},[t._v("#")]),t._v(" 使用throws")]),t._v(" "),e("p",[t._v("在某些情况下，如果一个方法产生了异常，但是它没有处理，那么它必须在throws中声明该异常。常见形式如下:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[t._v("ret"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("type "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("methName")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("param"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" except"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("list "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// body")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("对于Error 或 RuntimeException的子类，不必再throws中声明。Java假定方法会抛出这种异常。而所有其他类型的异常则需要声明，不声明就无法编译。")]),t._v(" "),e("h2",{attrs:{id:"三个额外的异常功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三个额外的异常功能"}},[t._v("#")]),t._v(" 三个额外的异常功能")]),t._v(" "),e("p",[t._v("JDK7中，Java异常处理新增了三个功能：")]),t._v(" "),e("ol",[e("li",[t._v("支持 自动资源管理(automatic resource management)：自动处理释放资源。使用 try-with-resources")]),t._v(" "),e("li",[t._v("多catch(multi-catch)")]),t._v(" "),e("li",[t._v("final rethrow 或 more precise rethrow")])]),t._v(" "),e("h3",{attrs:{id:"multi-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#multi-catch"}},[t._v("#")]),t._v(" multi-catch")]),t._v(" "),e("p",[t._v("允许在一个catch中捕获多个异常。每个multi-catch的参数默认都是final修饰的。")]),t._v(" "),e("p",[e("img",{attrs:{src:s(483),alt:"image-20210701235730310"}})]),t._v(" "),e("h3",{attrs:{id:"more-precise-rethrow"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#more-precise-rethrow"}},[t._v("#")]),t._v(" more precise rethrow")]),t._v(" "),e("p",[t._v("更精确的rethrow特性限制了可以被重新抛出的异常类型，只限于那些被相关的try块抛出的、没有被前面的catch子句处理的、并且是参数的子类型或超级类型的检查异常。")]),t._v(" "),e("h2",{attrs:{id:"java内置异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java内置异常"}},[t._v("#")]),t._v(" Java内置异常")]),t._v(" "),e("h3",{attrs:{id:"unchecked-exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unchecked-exception"}},[t._v("#")]),t._v(" Unchecked Exception")]),t._v(" "),e("p",[e("img",{attrs:{src:s(484),alt:"image-20210702000100256"}})]),t._v(" "),e("h3",{attrs:{id:"checked-exception"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#checked-exception"}},[t._v("#")]),t._v(" Checked Exception")]),t._v(" "),e("p",[e("img",{attrs:{src:s(485),alt:"image-20210702000111781"}})]),t._v(" "),e("h2",{attrs:{id:"自定义异常"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义异常"}},[t._v("#")]),t._v(" 自定义异常")]),t._v(" "),e("p",[t._v("通常继承Exception/RuntimeException类即可")])])}),[],!1,null,null,null);a.default=r.exports}}]);