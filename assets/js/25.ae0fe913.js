(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{512:function(t,e,s){"use strict";s.r(e);var a=s(20),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dockerfile中的run、cmd、entrypoint比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile中的run、cmd、entrypoint比较"}},[t._v("#")]),t._v(" Dockerfile中的RUN、CMD、ENTRYPOINT比较")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#run命令"}},[t._v("RUN命令")])]),s("li",[s("a",{attrs:{href:"#cmd"}},[t._v("CMD")])]),s("li",[s("a",{attrs:{href:"#entrypoint"}},[t._v("ENTRYPOINT")]),s("ul",[s("li",[s("a",{attrs:{href:"#验证例子"}},[t._v("验证例子")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-docker-run-image-的命令参数会被追加到-exec-形式的-entrypoint-的所有参数之后"}},[t._v("1.docker run (image)的命令参数会被追加到 exec 形式的 ENTRYPOINT 的所有参数之后")])]),s("li",[s("a",{attrs:{href:"#_2-docker-run会覆盖所有使用cmd指定的参数"}},[t._v("2.docker run会覆盖所有使用CMD指定的参数")])]),s("li",[s("a",{attrs:{href:"#_3-使用-docker-run-entrypoint-来覆盖-entrypoint-指令。"}},[t._v("3.使用 docker run --entrypoint 来覆盖 ENTRYPOINT 指令。")])]),s("li",[s("a",{attrs:{href:"#_4-shell-形式可以防止使用任何cmd或run命令行参数"}},[t._v("4.shell 形式可以防止使用任何CMD或run命令行参数")])]),s("li",[s("a",{attrs:{href:"#_5-shell-形式的entrypoint将作为-bin-sh-c-的一个子命令启动"}},[t._v("5.shell 形式的ENTRYPOINT将作为/bin/sh -c的一个子命令启动")]),s("ul",[s("li",[s("a",{attrs:{href:"#exec形式的entrypoint"}},[t._v("exec形式的ENTRYPOINT")])]),s("li",[s("a",{attrs:{href:"#shell形式的entrypoint"}},[t._v("shell形式的ENTRYPOINT")])])])])])])])]),s("li",[s("a",{attrs:{href:"#理解cmd和entrypoint如何交互"}},[t._v("理解CMD和ENTRYPOINT如何交互")])]),s("li",[s("a",{attrs:{href:"#简而言之"}},[t._v("简而言之")])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"run命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#run命令"}},[t._v("#")]),t._v(" RUN命令")]),t._v(" "),s("p",[t._v("RUN有2中形式:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("RUN <command>")]),t._v(" (shell形式，command在shell(linux上默认是 "),s("code",[t._v("/bin/sh -c")]),t._v(", windows上默认是"),s("code",[t._v("cmd /S /C")]),t._v(")中运行)")]),t._v(" "),s("li",[s("code",[t._v('RUN ["executable", "param1", "param2"]')]),t._v("（exec 形式）")])]),t._v(" "),s("p",[s("code",[t._v("RUN")]),t._v(" 指令会在当前镜像上新建一个layer，然后执行命名并提交结果。被提交的镜像用于下一步指令。")]),t._v(" "),s("p",[t._v("分层 "),s("code",[t._v("RUN")]),t._v(" 指令和生成提交符合 Docker 的核心概念，其中提交成本低，并且可以从镜像历史中的任何点创建容器，就像源代码控制一样。")]),t._v(" "),s("p",[s("em",[t._v("exec")]),t._v(" 形式可以避免 shell 字符串修改，并可以使用不包含指定 shell 可执行文件的基本映像来运行命令。")]),t._v(" "),s("p",[t._v("可以使用 "),s("code",[t._v("SHELL")]),t._v(" 命令更改 "),s("em",[t._v("shell")]),t._v(" 形式的默认 shell。")]),t._v(" "),s("p",[t._v("在 "),s("em",[t._v("shell")]),t._v(" 形式中，可以使用 \\（反斜杠）将单个 RUN 指令延续到下一行。例如，考虑以下两行：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" /bin/bash "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source $HOME/.bashrc; \\\necho $HOME'")]),t._v("\n")])])]),s("p",[t._v("等价于")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" /bin/bash "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'source $HOME/.bashrc; echo $HOME'")]),t._v("\n")])])]),s("p",[t._v("要使用除“/bin/sh”之外的不同 shell，请使用传入所需 shell 的 "),s("em",[t._v("exec")]),t._v(" 形式。例如：")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/bin/bash"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"echo hello"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("注意:")]),t._v(" "),s("p",[t._v("exec 形式被解析为 JSON 数组，这意味着必须在单词周围使用双引号 (“) 而不是单引号 (‘)。")])]),t._v(" "),s("p",[t._v('与shell形式不同，exec形式不调用命令shell。这意味着正常的shell处理不会发生。例如，RUN [ "echo", "$HOME" ] 不会对 $HOME进行变量替换。如果你想进行shell处理，那么要么使用shell形式，要么直接执行一个shell，例如。RUN [ "sh", "-c", "echo ​$HOME" ] 。当使用exec形式并直接执行shell时，就像shell形式的情况一样，是shell在做环境变量的扩展，而不是docker。')]),t._v(" "),s("blockquote",[s("p",[t._v("注意:")]),t._v(" "),s("p",[t._v("在JSON形式中，有必要转义反斜线。这在Windows上尤其重要，因为反斜杠是路径分隔符。否则，下面这一行会因为不是有效的JSON而被视为shell形式，并以一种意外的方式失败。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c:\\windows\\system32\\tasklist.exe"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("正确的语法是:")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c:\\\\windows\\\\system32\\\\tasklist.exe"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),s("p",[t._v("RUN指令的缓存在下次构建时不会自动失效。像"),s("code",[t._v("RUN apt-get dist-upgrade -y")]),t._v("这样的指令的缓存会在下次构建时被重新使用。RUN指令的缓存可以通过使用"),s("code",[t._v("--no-cache")]),t._v("标志来失效，例如"),s("code",[t._v("docker build --no-cache")]),t._v("。")]),t._v(" "),s("p",[t._v("更多信息请参见"),s("a",{attrs:{href:"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile最佳实践指南"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[t._v("RUN指令的缓存可以通过ADD和COPY指令失效。")]),t._v(" "),s("h2",{attrs:{id:"cmd"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cmd"}},[t._v("#")]),t._v(" CMD")]),t._v(" "),s("p",[t._v("CMD指令有三种形式:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('CMD ["executable","param1","param2"]')]),t._v(" ("),s("em",[t._v("exec")]),t._v(" 形式，首选形式)")]),t._v(" "),s("li",[s("code",[t._v('CMD ["param1","param2"]')]),t._v(" ( 作为"),s("em",[t._v("ENTRYPOINT的默认参数")]),t._v(")")]),t._v(" "),s("li",[s("code",[t._v("CMD command param1 param2")]),t._v(" ("),s("em",[t._v("shell")]),t._v(" 形式)")])]),t._v(" "),s("p",[t._v("一个Dockerfile中只能有一个 CMD 指令。如果有多个CMD指令，那么只有最后一个CMD指令会生效。")]),t._v(" "),s("p",[s("strong",[t._v("CMD的主要目的是为执行中的容器提供默认值")]),t._v("。这些默认值可以包括一个可执行文件，也可以省略可执行文件，在这种情况下，你必须同时指定一个ENTRYPOINT指令。")]),t._v(" "),s("p",[t._v("如果CMD被用来为ENTRYPOINT指令提供默认参数，CMD和ENTRYPOINT指令都应该用JSON数组格式来指定。")]),t._v(" "),s("blockquote",[s("p",[t._v("注意:")]),t._v(" "),s("p",[t._v("exec 形式被解析为 JSON 数组，这意味着必须在单词周围使用双引号 (“) 而不是单引号 (‘)。")])]),t._v(" "),s("p",[t._v("与"),s("em",[t._v("shell")]),t._v("形式不同，"),s("strong",[s("em",[t._v("exec")]),t._v("形式不调用命令shell")]),t._v('。这意味着正常的shell处理不会发生。例如，CMD [ "echo", "$HOME"] 不会对$HOME进行变量替换。'),s("strong",[t._v("如果你想进行shell处理，那么要么使用"),s("em",[t._v("shell")]),t._v("形式，要么直接执行一个shell")]),t._v('，例如。CMD [ "sh", "-c", "echo ​$HOME" ] 。当使用'),s("em",[t._v("exec")]),t._v("形式并直接执行shell时，就像shell形式的情况一样，是shell在做环境变量扩展，而不是docker。")]),t._v(" "),s("p",[s("strong",[t._v("当在"),s("em",[t._v("shell")]),t._v("或"),s("em",[t._v("exec")]),t._v("格式中使用时，CMD指令设置运行镜像时要执行的命令。")])]),t._v(" "),s("p",[s("strong",[t._v("如果你使用CMD的"),s("em",[t._v("shell")]),t._v("形式，那么"),s("code",[t._v("<command>")]),t._v("将在"),s("code",[t._v("/bin/sh -c")]),t._v("中执行。")])]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" echo "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is a test."')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("|")]),t._v(" wc "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("\n")])])]),s("p",[t._v("如果你想在没有shell的情况下运行你的"),s("code",[t._v("<command>")]),t._v("，那么你必须将命令表达为一个JSON数组，并给出可执行文件的完整路径。这种数组形式是CMD的首选格式。任何额外的参数必须在数组中单独表示为字符串。")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/bin/wc"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"--help"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("如果你希望你的容器每次都运行相同的可执行文件，那么你应该考虑将 ENTRYPOINT 与 CMD 结合使用。参见"),s("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/#entrypoint",target:"_blank",rel:"noopener noreferrer"}},[t._v("ENTRYPOINT"),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("如果用户指定参数给docker run，那么它们将覆盖CMD中指定的默认值。")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意:")]),t._v(" "),s("p",[t._v("不要把RUN和CMD混淆。RUN实际上是运行一个命令并提交结果；CMD在构建时不执行任何东西，而是为镜像指定要执行的命令。")])]),t._v(" "),s("h2",{attrs:{id:"entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint"}},[t._v("#")]),t._v(" ENTRYPOINT")]),t._v(" "),s("p",[s("code",[t._v("ENTRYPOINT")]),t._v(" 有两种形式:")]),t._v(" "),s("ul",[s("li",[s("p",[s("em",[t._v("exec")]),t._v(" 形式 ，这是首选形式:")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"executable"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"param2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[s("em",[t._v("shell")]),t._v("形式")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" command param1 param2\n")])])])])]),t._v(" "),s("p",[t._v("一个ENTRYPOINT允许你配置一个将作为可执行文件运行的容器。")]),t._v(" "),s("p",[t._v("例如，下面是启动nginx的默认内容，监听端口为80：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run -i -t --rm -p "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),t._v(":80 nginx\n")])])]),s("p",[s("strong",[s("code",[t._v("docker run (image)")]),t._v(" 的命令参数会被追加到 exec 形式的 ENTRYPOINT 的所有参数之后，并且会覆盖所有使用CMD指定的参数。"),s("strong",[t._v("这样就可以给entry point传递参数了,即，"),s("code",[t._v("docker run (image) -d")]),t._v(" 会传递 "),s("code",[t._v("-d")]),t._v(" 参数给 entry point。你可以")]),t._v("使用 "),s("code",[t._v("docker run --entrypoint")]),t._v(" 来覆盖 ENTRYPOINT 指令。")])]),t._v(" "),s("p",[s("strong",[s("em",[t._v("shell")]),t._v(" 形式可以防止使用任何CMD或run命令行参数")]),t._v("，但缺点是你的ENTRYPOINT将作为"),s("code",[t._v("/bin/sh -c")]),t._v("的一个子命令启动，它不传递信号。这意味着可执行文件不会是容器的"),s("code",[t._v("PID 1")]),t._v("--也不会收到Unix信号--所以你的可执行文件不会收到来自docker stop <container>的"),s("code",[t._v("SIGTERM")]),t._v("。")]),t._v(" "),s("p",[s("strong",[t._v("Dockerfile中，只有最后一条ENTRYPOINT指令才有效果。")])]),t._v(" "),s("h3",{attrs:{id:"验证例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#验证例子"}},[t._v("#")]),t._v(" 验证例子")]),t._v(" "),s("h4",{attrs:{id:"_1-docker-run-image-的命令参数会被追加到-exec-形式的-entrypoint-的所有参数之后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-run-image-的命令参数会被追加到-exec-形式的-entrypoint-的所有参数之后"}},[t._v("#")]),t._v(" 1.docker run (image)的命令参数会被追加到 exec 形式的 ENTRYPOINT 的所有参数之后")]),t._v(" "),s("p",[t._v("1.编写Dockerfile:")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("focal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("2.构建镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build -t study-dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("3.测试")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不追加参数:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile\n")])])]),s("p",[t._v("结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total 48\nlrwxrwxrwx   1 root root    7 Apr 16 05:11 bin -> usr/bin\ndrwxr-xr-x   2 root root 4096 Apr 15  2020 boot\ndrwxr-xr-x   5 root root  360 Jul  2 11:04 dev\n....\n")])])])]),t._v(" "),s("li",[s("p",[t._v("追加参数 "),s("code",[t._v("-ah")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile -ah\n")])])]),s("p",[t._v("结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total 56K\ndrwxr-xr-x   1 root root 4.0K Jul  2 11:06 .\ndrwxr-xr-x   1 root root 4.0K Jul  2 11:06 ..\n-rwxr-xr-x   1 root root    0 Jul  2 11:06 .dockerenv\n...\n")])])]),s("p",[t._v("从输出结果可以看出，追加参数生效了")])])]),t._v(" "),s("h4",{attrs:{id:"_2-docker-run会覆盖所有使用cmd指定的参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-docker-run会覆盖所有使用cmd指定的参数"}},[t._v("#")]),t._v(" 2.docker run会覆盖所有使用CMD指定的参数")]),t._v(" "),s("p",[t._v("1.编写Dockerfile")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("focal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ls"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-l"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-h"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),s("p",[t._v("这里，使用CMD给ENTRYPOINT传参")]),t._v(" "),s("p",[t._v("2.构建镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build -t study-dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("3.测试")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不追加参数")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile                                                  \n")])])]),s("p",[t._v("结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total 56K\ndrwxr-xr-x   1 root root 4.0K Jul  2 11:12 .\ndrwxr-xr-x   1 root root 4.0K Jul  2 11:12 ..\n-rwxr-xr-x   1 root root    0 Jul  2 11:12 .dockerenv\nlrwxrwxrwx   1 root root    7 Apr 16 05:11 bin -> usr/bin\n...\n")])])])]),t._v(" "),s("li",[s("p",[t._v("追加参数")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile -a\n")])])]),s("p",[t._v("结果：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("total 56\ndrwxr-xr-x   1 root root 4096 Jul  2 11:12 .\ndrwxr-xr-x   1 root root 4096 Jul  2 11:12 ..\n-rwxr-xr-x   1 root root    0 Jul  2 11:12 .dockerenv\nlrwxrwxrwx   1 root root    7 Apr 16 05:11 bin -> usr/bin\n...\n")])])]),s("p",[t._v("从输出结果可以看出，CMD中指定的所有参数都被 docker run 中的 -a参数覆盖了。")])])]),t._v(" "),s("h4",{attrs:{id:"_3-使用-docker-run-entrypoint-来覆盖-entrypoint-指令。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用-docker-run-entrypoint-来覆盖-entrypoint-指令。"}},[t._v("#")]),t._v(" 3.使用 "),s("code",[t._v("docker run --entrypoint")]),t._v(" 来覆盖 ENTRYPOINT 指令。")]),t._v(" "),s("p",[t._v("使用 "),s("code",[t._v("--entrypoint")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm --entrypoint "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" study-dockerfile\n")])])]),s("p",[t._v("运行结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bin   dev  home  lib32\tlibx32\tmnt  proc  run\t srv  tmp  var\nboot  etc  lib\t lib64\tmedia\topt  root  sbin  sys  usr\n")])])]),s("p",[t._v("从输出结果可以看出，Dockerfile中的ENTRYPOINT指令被覆盖了。")]),t._v(" "),s("h4",{attrs:{id:"_4-shell-形式可以防止使用任何cmd或run命令行参数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-shell-形式可以防止使用任何cmd或run命令行参数"}},[t._v("#")]),t._v(" 4."),s("em",[t._v("shell")]),t._v(" 形式可以防止使用任何CMD或run命令行参数")]),t._v(" "),s("p",[t._v("1.编写Dockerfile")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("focal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" ls \n")])])]),s("p",[t._v("这里使用的是ENTRYPOINT 的 "),s("em",[t._v("shell")]),t._v("形式")]),t._v(" "),s("p",[t._v("2.构建镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build -t study-dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n")])])]),s("p",[t._v("3.测试")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("不追加参数")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile\n")])])]),s("p",[t._v("结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bin   dev  home  lib32\tlibx32\tmnt  proc  run\t srv  tmp  var\nboot  etc  lib\t lib64\tmedia\topt  root  sbin  sys  usr\n")])])])]),t._v(" "),s("li",[s("p",[t._v("追加参数")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker run -it --rm study-dockerfile -a\n")])])]),s("p",[t._v("结果:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("bin   dev  home  lib32\tlibx32\tmnt  proc  run\t srv  tmp  var\nboot  etc  lib\t lib64\tmedia\topt  root  sbin  sys  usr\n")])])]),s("p",[t._v("从输出结果可以看出，"),s("code",[t._v("docker run")]),t._v("中指定的 "),s("code",[t._v("-a")]),t._v("参数没有生效")])])]),t._v(" "),s("h4",{attrs:{id:"_5-shell-形式的entrypoint将作为-bin-sh-c的一个子命令启动"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-shell-形式的entrypoint将作为-bin-sh-c的一个子命令启动"}},[t._v("#")]),t._v(" 5."),s("em",[t._v("shell")]),t._v(" 形式的ENTRYPOINT将作为"),s("code",[t._v("/bin/sh -c")]),t._v("的一个子命令启动")]),t._v(" "),s("h5",{attrs:{id:"exec形式的entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exec形式的entrypoint"}},[t._v("#")]),t._v(" exec形式的ENTRYPOINT")]),t._v(" "),s("p",[t._v("1.编写Dockerfile")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("focal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" watch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("n 1 ls\n")])])]),s("p",[t._v("2.构建镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build -t study-dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" \n")])])]),s("p",[t._v("3.验证")]),t._v(" "),s("p",[t._v("启动容器")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run -itd --rm --name study-dockerfile study-dockerfile\n")])])]),s("p",[t._v("使用"),s("code",[t._v("docker top <container>")]),t._v("命令查看容器中的进程:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" study-dockerfile\n"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("UID")]),t._v("  PID    "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PPID")]),t._v("  CMD\nroot "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("785275")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("785255")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),s("h5",{attrs:{id:"shell形式的entrypoint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shell形式的entrypoint"}},[t._v("#")]),t._v(" shell形式的ENTRYPOINT")]),t._v(" "),s("p",[t._v("1.编写Dockerfile")]),t._v(" "),s("div",{staticClass:"language-dockerfile extra-class"},[s("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" ubuntu"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("focal\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" watch "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("n 1 ls\n")])])]),s("p",[t._v("2.构建镜像")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("docker build -t study-dockerfile "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" \n")])])]),s("p",[t._v("3.验证")]),t._v(" "),s("p",[t._v("启动容器")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker run -itd --rm --name study-dockerfile study-dockerfile\n")])])]),s("p",[t._v("使用"),s("code",[t._v("docker top <container>")]),t._v("命令查看容器中的进程:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" study-dockerfile\n"),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("UID")]),t._v("   PID     "),s("span",{pre:!0,attrs:{class:"token environment constant"}},[t._v("PPID")]),t._v("   CMD\nroot  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787440")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787419")]),t._v("    /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nroot  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787487")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787440")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\n")])])]),s("p",[t._v("从上面的输出可以看到 "),s("code",[t._v("watch -n 1 ls")]),t._v(" 是 "),s("code",[t._v("/bin/sh -c watch -n 1 ls")]),t._v("的一个子进程。")]),t._v(" "),s("p",[t._v("这时，也可以在主机上查看相应进程:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -aux "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v("\nroot         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("171")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("?   "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("watchdogd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nsheng     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("763889")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("76288")]),t._v(" ?         "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 /usr/share/code/code /usr/share/code/resources/app/out/bootstrap-fork --type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("watcherService\nroot      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787440")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("600")]),t._v(" pts/0      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 /bin/sh -c "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nroot      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787487")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2492")]),t._v(" pts/0      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v(" -n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v("\nsheng     "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("787568")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2704")]),t._v(" pts/4      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(":00 "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" --color"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("auto --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".bzr --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("CVS --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".git --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".hg --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".svn --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".idea --exclude-dir"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(".tox "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("watch")]),t._v("\n")])])]),s("p",[t._v("现在，停止容器:")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ docker stop study-dockerfile\n")])])]),s("p",[t._v("再查看一下主机上响应的进程, 发现在第一次使用"),s("code",[t._v("docker stop")]),t._v("命令的时候，子进程在容器停止/删除后并没有退出，但是后面再试的时候，发现子进程在容器停止/删除后也结束了。与预期结果并不相符。")]),t._v(" "),s("h2",{attrs:{id:"理解cmd和entrypoint如何交互"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解cmd和entrypoint如何交互"}},[t._v("#")]),t._v(" 理解CMD和ENTRYPOINT如何交互")]),t._v(" "),s("p",[t._v("CMD和ENTRYPOINT指令"),s("strong",[t._v("都定义了当运行一个容器时要执行的命令")]),t._v("。它们合作的几个规则如下:")]),t._v(" "),s("ol",[s("li",[t._v("Dockerfile应该至少指定 CMD 和 ENTRYPOINT 中的一个")]),t._v(" "),s("li",[t._v("当使用容器做为可执行文件时应该使用ENTRYPOINT")]),t._v(" "),s("li",[t._v("CMD应该用于一种为ENTRYPOINT命令定义默认参数的方式 或 用于在容器中执行 ad-hoc命令")]),t._v(" "),s("li",[t._v("当用其他参数运行容器时，CMD会被覆盖")])]),t._v(" "),s("p",[t._v("下表显示了不同的ENTRYPOINT/CMD组合会执行什么命令:")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",{staticStyle:{"text-align":"left"}}),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("No ENTRYPOINT")]),t._v(" "),s("th",{staticStyle:{"text-align":"left"}},[t._v("ENTRYPOINT exec_entry p1_entry")]),t._v(" "),s("th",[t._v("ENTRYPOINT [“exec_entry”, “p1_entry”]")])])]),t._v(" "),s("tbody",[s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("No CMD")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[s("em",[t._v("error, not allowed")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("/bin/sh -c exec_entry p1_entry")]),t._v(" "),s("td",[t._v("exec_entry p1_entry")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("CMD [“exec_cmd”, “p1_cmd”]")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("exec_cmd p1_cmd")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("/bin/sh -c exec_entry p1_entry")]),t._v(" "),s("td",[t._v("exec_entry p1_entry exec_cmd p1_cmd")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("CMD [“p1_cmd”, “p2_cmd”]")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("p1_cmd p2_cmd")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("/bin/sh -c exec_entry p1_entry")]),t._v(" "),s("td",[t._v("exec_entry p1_entry p1_cmd p2_cmd")])]),t._v(" "),s("tr",[s("td",{staticStyle:{"text-align":"left"}},[s("strong",[t._v("CMD exec_cmd p1_cmd")])]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("/bin/sh -c exec_cmd p1_cmd")]),t._v(" "),s("td",{staticStyle:{"text-align":"left"}},[t._v("/bin/sh -c exec_entry p1_entry")]),t._v(" "),s("td",[t._v("exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("注意:")]),t._v(" "),s("p",[t._v("如果CMD是从基础镜像中定义的，设置ENTRYPOINT将把CMD重置为一个空值。在这种情况下，CMD必须在当前镜像中定义才有意义。")])]),t._v(" "),s("h2",{attrs:{id:"简而言之"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简而言之"}},[t._v("#")]),t._v(" 简而言之")]),t._v(" "),s("ul",[s("li",[t._v("RUN: （在构建镜像阶段执行）它在一个新的layer中执行命令，并创建一个新的镜像。例如，此命令通常用于安装软件包。")]),t._v(" "),s("li",[t._v("CMD: （在容器运行时执行）设置默认命令和/或参数，它能够被"),s("code",[t._v("docker run")]),t._v("命令中的参数覆盖")]),t._v(" "),s("li",[t._v("ENTRYPOINT:（在容器运行时执行）允许你配置一个将作为可执行文件运行的容器。")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[t._v("https://docs.docker.com/engine/reference/builder/")])]),t._v(" "),s("Vssue",{attrs:{title:t.$title}})],1)}),[],!1,null,null,null);e.default=r.exports}}]);