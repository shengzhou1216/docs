(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{419:function(t,e,r){t.exports=r.p+"assets/img/image-20210721173239972.fa61d42d.png"},420:function(t,e,r){t.exports=r.p+"assets/img/image-20210721173552507.e128c629.png"},421:function(t,e,r){t.exports=r.p+"assets/img/image-20210721173847012.b3a5e7a0.png"},422:function(t,e,r){t.exports=r.p+"assets/img/image-20210721174236092.a185e962.png"},423:function(t,e,r){t.exports=r.p+"assets/img/image-20210721174934722.060430c8.png"},424:function(t,e,r){t.exports=r.p+"assets/img/image-20210721192548965.472a7f25.png"},425:function(t,e,r){t.exports=r.p+"assets/img/image-20210721192900485.3567ee3b.png"},426:function(t,e,r){t.exports=r.p+"assets/img/image-20210721201457384.e9dea624.png"},427:function(t,e,r){t.exports=r.p+"assets/img/image-20210721202753565.4d3a4a7b.png"},428:function(t,e,r){t.exports=r.p+"assets/img/1_1bcaVVjG_077zHVzGfHUyw.e2057fd3.gif"},429:function(t,e,r){t.exports=r.p+"assets/img/1_5xdQ1j6Ai2PZYCRQuXM5wg.4890d078.gif"},430:function(t,e,r){t.exports=r.p+"assets/img/1_pxkIXo-LvXEkGaJJeR9cyA.d95a05ef.png"},431:function(t,e,r){t.exports=r.p+"assets/img/1_y3QmSfyergjmVV32nH7tPA.9772b27b.gif"},432:function(t,e,r){t.exports=r.p+"assets/img/1_atsh0R6Do25SriYvvskkgA.e66bf867.gif"},433:function(t,e,r){t.exports=r.p+"assets/img/1_DuLBecXpJjFh1qnakXjWWg.7a9dd8c1.png"},520:function(t,e,r){"use strict";r.r(e);var s=r(20),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器是如何渲染web页面的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器是如何渲染web页面的"}},[t._v("#")]),t._v(" 浏览器是如何渲染web页面的？")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#文档对象模型-dom"}},[t._v("文档对象模型(DOM)")])]),s("li",[s("a",{attrs:{href:"#css对象模型-cssom"}},[t._v("CSS对象模型 (CSSOM)")])]),s("li",[s("a",{attrs:{href:"#渲染树-render-tree"}},[t._v("渲染树(Render Tree)")])]),s("li",[s("a",{attrs:{href:"#渲染顺序-rendering-sequence"}},[t._v("渲染顺序(Rendering Sequence )")]),s("ul",[s("li",[s("a",{attrs:{href:"#布局操作-layout-operation-对渲染树中的单个节点进行布局"}},[t._v("布局操作(Layout operation)——对渲染树中的单个节点进行布局")])]),s("li",[s("a",{attrs:{href:"#绘制操作-paint-operation-绘制各个图层"}},[t._v("绘制操作(Paint operation)——绘制各个图层")])]),s("li",[s("a",{attrs:{href:"#合成操作-compositing-operation-利用gpu-合成各个图层"}},[t._v("合成操作(Compositing operation)——（利用GPU）合成各个图层")])]),s("li",[s("a",{attrs:{href:"#浏览器引擎-browser-engines"}},[t._v("浏览器引擎(Browser engines)")])])])]),s("li",[s("a",{attrs:{href:"#浏览器中的渲染进程-rendering-process-in-browsers"}},[t._v("浏览器中的渲染进程(Rendering Process in browsers)")]),s("ul",[s("li",[s("a",{attrs:{href:"#解析和外部资源-parsing-and-external-resources"}},[t._v("解析和外部资源（Parsing and External Resources）")])]),s("li",[s("a",{attrs:{href:"#阻断解析器的脚本-parser-blocking-scripts"}},[t._v("阻断解析器的脚本(Parser-Blocking Scripts)")])]),s("li",[s("a",{attrs:{href:"#渲染阻塞的css-render-blocking-css"}},[t._v("渲染阻塞的CSS（Render-Blocking CSS）")])]),s("li",[s("a",{attrs:{href:"#文档的-domcontentloaded-事件"}},[t._v("文档的 DOMContentLoaded 事件")])]),s("li",[s("a",{attrs:{href:"#window的-load-事件"}},[t._v("Window的 load 事件")])])])])])]),s("p"),t._v(" "),s("blockquote",[s("p",[t._v("原文："),s("a",{attrs:{href:"https://medium.com/jspoint/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969",target:"_blank",rel:"noopener noreferrer"}},[t._v("how-the-browser-renders-a-web-page"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("每当你在开发一个网站时，有一些事情对于"),s("strong",[t._v("好的用户体验")]),t._v("是非常重要的。一个网站可能遇到的一些常见问题有："),s("strong",[t._v("资源加载缓慢")]),t._v("，"),s("strong",[t._v("在初次渲染时等待不必要的文件下载")]),t._v("，  "),s("strong",[t._v("无风格的内容闪现")]),t._v("(FOUC)等等。为了避免这些问题，我们需要了解浏览器如何渲染一个典型网页的生命周期。")]),t._v(" "),s("p",[t._v("首先，我们需要了解什么是"),s("strong",[t._v("DOM")]),t._v("。当浏览器向服务器发送请求以获取一个HTML文档时，服务器会返回一个"),s("strong",[t._v("二进制流格式")]),t._v("的HTML页面，这基本上是一个文本文件，其响应头"),s("code",[t._v("Content-Type")]),t._v("被设置为"),s("code",[t._v("text/html; charset=UTF-8")]),t._v("。")]),t._v(" "),s("p",[t._v("这里"),s("code",[t._v("text/html")]),t._v("是一个"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Media_type",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("MIME Type")]),s("OutboundLink")],1),t._v("，它告诉浏览器这是一个HTML文档，"),s("code",[t._v("charset=UTF-8")]),t._v("告诉浏览器它是以"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/UTF-8",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("UTF-8")]),s("OutboundLink")],1),t._v("字符编码进行"),s("a",{attrs:{href:"https://medium.com/jspoint/introduction-to-character-encoding-3b9735f265a6",target:"_blank",rel:"noopener noreferrer"}},[t._v("编码"),s("OutboundLink")],1),t._v(" 的。利用这些信息，浏览器可以将二进制格式转换成可读的文本文件。这在下面的屏幕截图中显示。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(419),alt:"image-20210721173239972"}})]),t._v(" "),s("p",[t._v("如果缺少这个头，浏览器就不知道如何处理该文件，它将以纯文本格式呈现。但是，如果一切正常，经过这样的转换，浏览器就可以开始读取HTML文档了。一个典型的HTML文档可以是这样的。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<!")]),s("span",{pre:!0,attrs:{class:"token doctype-tag"}},[t._v("DOCTYPE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token name"}},[t._v("HTML")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Rendering Test"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("title")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- stylesheet --\x3e")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("stylesheet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./style.css"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("head")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("container"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Hello World!"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n          "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("This is a sample paragraph."),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n      \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- script --\x3e")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("script")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("src")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("./main.js"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token script"}}),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("script")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("html")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("p",[t._v("在上述文件中，我们的网页依赖于"),s("code",[t._v("style.css")]),t._v("为HTML元素提供样式，"),s("code",[t._v("main.js")]),t._v("执行一些JavaScript操作。通过一些整洁的CSS样式，我们的上述网页将看起来像这样。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(420),alt:"image-20210721173552507"}})]),t._v(" "),s("p",[t._v("但问题仍然存在，浏览器是如何从一个只包含文本的简单HTML文件中渲染出这个漂亮的网页的？为此，我们需要了解什么是"),s("strong",[t._v("DOM")]),t._v("，"),s("strong",[t._v("CSSOM，"),s("strong",[t._v("和")]),t._v("Render Tree")]),t._v("？")]),t._v(" "),s("h2",{attrs:{id:"文档对象模型-dom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文档对象模型-dom"}},[t._v("#")]),t._v(" "),s("strong",[t._v("文档对象模型(DOM)")])]),t._v(" "),s("p",[t._v("当浏览器读取HTML代码时，每当遇到像"),s("code",[t._v("html")]),t._v("、"),s("code",[t._v("body")]),t._v("、"),s("code",[t._v("div")]),t._v("等HTML元素时，就会创建一个叫做"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Node",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Node")]),s("OutboundLink")],1),t._v("的JavaScript对象。最终，所有的HTML元素都会被转换为JavaScript对象。")]),t._v(" "),s("p",[t._v("由于每个HTML元素都有不同的属性，Node对象将从不同的类（"),s("em",[t._v("构造函数")]),t._v("）创建。例如，"),s("code",[t._v("div")]),t._v("元素的Node对象是由"),s("code",[t._v("HTMLDivElement")]),t._v("创建的，它"),s("strong",[t._v("继承")]),t._v("了 "),s("code",[t._v("Node")]),t._v("类。对于我们早期的HTML文档，我们可以用一个简单的测试来可视化这些节点，如下所示。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(421),alt:"image-20210721173847012"}})]),t._v(" "),s("p",[t._v("浏览器有内置的类，如"),s("code",[t._v("HTMLDivElement")]),t._v("、"),s("code",[t._v("HTMLScriptElement")]),t._v("、"),s("code",[t._v("Node")]),t._v("等。")]),t._v(" "),s("p",[t._v("浏览器从HTML文件中创建了节点后，必须将这些节点对象创建成一个"),s("strong",[t._v("树状结构")]),t._v("。由于我们的HTML文件中的HTML元素是相互嵌套的，浏览器需要复制这一点，但要使用它之前创建的Node对象。这将有助于浏览器在整个生命周期内有效地渲染和管理网页。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(422),alt:"image-20210721174236092"}})]),t._v(" "),s("p",[t._v("我们早期的HTML文档的"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("DOM")]),s("OutboundLink")],1),t._v("树看起来像上面一样。一个DOM树从最上面的元素开始，也就是"),s("code",[t._v("html")]),t._v("元素，然后根据文档中HTML元素的出现和嵌套情况进行分支。每当发现一个HTML元素，它就从其各自的类（"),s("em",[t._v("构造函数")]),t._v("）创建一个DOM节点（"),s("em",[t._v("Node")]),t._v("）对象。")]),t._v(" "),s("blockquote",[s("p",[t._v("💡一个DOM节点不一定是一个HTML元素。当浏览器创建一个DOM树时，它也会将"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Comment",target:"_blank",rel:"noopener noreferrer"}},[t._v("注释"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Attr",target:"_blank",rel:"noopener noreferrer"}},[t._v("属性"),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/Text",target:"_blank",rel:"noopener noreferrer"}},[t._v("文本"),s("OutboundLink")],1),t._v("等东西作为单独的节点保存在树上。但为了简单起见，我们将只考虑HTML元素的DOM节点，又称"),s("strong",[t._v("DOM元素")]),t._v("。"),s("a",{attrs:{href:"https://www.w3schools.com/jsref/prop_node_nodetype.asp",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("这里")]),s("OutboundLink")],1),t._v("是所有DOM节点类型的列表。")])]),t._v(" "),s("p",[t._v("你可以在"),s("strong",[t._v("Google Chrome DevTools Console")]),t._v("中直观地看到DOM树，如下图所示。这将显示DOM元素的层次结构（"),s("em",[t._v("DOM树的高层视图")]),t._v("）以及每个DOM元素的属性。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(423),alt:"image-20210721174934722"}})]),t._v(" "),s("p",[t._v("JavaScript不理解DOM是什么，它不是JavaScript规范的一部分。DOM是浏览器提供的一个高级"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Web API")]),s("OutboundLink")],1),t._v("，用于有效地渲染网页，并将其公开，以便开发者出于各种目的动态地操作DOM元素。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 使用DOM API，开发者可以添加或删除HTML元素，改变其显示或绑定事件监听器。使用DOM API，HTML元素可以在内存中创建或克隆，并在不影响渲染的DOM树的情况下进行替换。这使开发者有能力构建具有丰富用户体验的高度动态网页。")])]),t._v(" "),s("h2",{attrs:{id:"css对象模型-cssom"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#css对象模型-cssom"}},[t._v("#")]),t._v(" "),s("strong",[t._v("CSS对象模型 (CSSOM)")])]),t._v(" "),s("p",[t._v("当我们设计一个网站时，我们的目的是让它尽可能的好看。而我们通过为HTML元素提供一些样式来做到这一点。在HTML页面中，我们使用"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("CSS")]),s("OutboundLink")],1),t._v("为HTML元素提供样式，它代表"),s("strong",[t._v("层叠样式表")]),t._v("。使用CSS"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors",target:"_blank",rel:"noopener noreferrer"}},[t._v("选择器"),s("OutboundLink")],1),t._v("，我们可以针对DOM元素，为样式属性设置一个值，如"),s("code",[t._v("颜色")]),t._v("或"),s("code",[t._v("字体大小")]),t._v("。")]),t._v(" "),s("p",[t._v("对HTML元素应用样式有不同的方法，如使用外部CSS文件、使用"),s("code",[t._v("<style>")]),t._v("标签嵌入CSS、使用HTML元素上的"),s("code",[t._v("style")]),t._v("属性的内联方法或使用JavaScript。但最终，浏览器必须完成将CSS样式应用到DOM元素的重任。")]),t._v(" "),s("p",[t._v("比方说，对于我们前面的例子，我们将使用下面的CSS样式（"),s("em",[t._v("这不是截图中显示的卡片所用的CSS")]),t._v("）。为了简单起见，我们不打算纠结于如何在HTML页面中导入CSS样式。")]),t._v(" "),s("div",{staticClass:"language-css extra-class"},[s("pre",{pre:!0,attrs:{class:"language-css"}},[s("code",[t._v("\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("html")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("padding")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("margin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 0"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v("body")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 14px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("width")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 300px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("height")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 200px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" black"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container > h1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" gray"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token selector"}},[t._v(".container > p")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("font-size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 12px"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token property"}},[t._v("display")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" none"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在构建DOM之后，浏览器从所有的来源（"),s("em",[t._v("外部、嵌入、内联、用户代理等")]),t._v("）读取CSS，并构建一个"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("CSSOM")]),s("OutboundLink")],1),t._v("。CSSOM是"),s("strong",[t._v("CSS对象模型")]),t._v("的缩写，与DOM一样，是一种树状结构。")]),t._v(" "),s("p",[t._v("这个树中的每个节点都包含CSS样式信息，这些信息将应用于它所针对的DOM元素（"),s("em",[t._v("由选择器指定")]),t._v("）。然而，CSSOM不包含不能在屏幕上打印的DOM元素，如"),s("code",[t._v("<meta>")]),t._v("、"),s("code",[t._v("<script>")]),t._v("、"),s("code",[t._v("<title>")]),t._v("等。")]),t._v(" "),s("p",[t._v("我们知道，大多数浏览器都有自己的样式表，称为"),s("a",{attrs:{href:"https://stackoverflow.com/questions/12582624/what-is-a-user-agent-stylesheet",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("用户代理样式表 user agent stylesheet")]),s("OutboundLink")],1),t._v("，浏览器首先通过用开发者属性提供的CSS覆盖用户代理样式来计算DOM元素的最终CSS属性（"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("使用特殊性规则")]),s("OutboundLink")],1),t._v("），然后构造一个节点。")]),t._v(" "),s("p",[t._v("即使一个特定的HTML元素的CSS属性（如"),s("code",[t._v("显示")]),t._v("）没有被开发者或浏览器定义，它的值也会被设置为"),s("a",{attrs:{href:"https://www.w3.org/Style/CSS/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("W3C CSS")]),s("OutboundLink")],1),t._v("标准规定的该属性的"),s("strong",[t._v("默认值")]),t._v("。在选择CSS属性的默认值时，如果一个属性符合"),s("a",{attrs:{href:"https://www.w3.org/TR/CSS1/#inheritance",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("W3C文档")]),s("OutboundLink")],1),t._v("中提到的继承条件，则会使用一些"),s("strong",[t._v("继承")]),t._v("的规则。")]),t._v(" "),s("p",[t._v("例如，"),s("code",[t._v("color")]),t._v("和"),s("code",[t._v("font-size")]),t._v("等，如果一个HTML元素缺少这些属性，就会继承父元素的值。所以你可以想象，在一个HTML元素上有这些属性，它的所有子元素都会继承它。这就是所谓的"),s("strong",[t._v("层叠样式")]),t._v("，这就是为什么CSS是"),s("strong",[t._v("层叠样式表")]),t._v("的首字母缩写。这也是浏览器构建CSSOM的根本原因，CSSOM是一个树状结构，根据CSS层叠规则来"),s("strong",[t._v("计算样式")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 你可以通过Chrome DevTools控制台的"),s("strong",[t._v("元素")]),t._v("面板看到一个HTML元素的计算样式。从左侧面板选择任何HTML元素，然后点击右侧面板上的"),s("strong",[t._v("计算")]),t._v("标签。")])]),t._v(" "),s("p",[t._v("我们可以用下图来说明我们前面例子中的CSSOM树。为了简单起见，我们将忽略用户代理样式，而专注于前面提到的CSS样式。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(424),alt:"image-20210721192548965"}})]),t._v(" "),s("p",[t._v("从上图中你可以看到，我们的CSSOM树不包含像<link>、<title>、<script>等不被打印在屏幕上的元素。红色的CSS属性值是从顶部层叠下来的，而灰色的属性值是凌驾于继承值之上的。")]),t._v(" "),s("h2",{attrs:{id:"渲染树-render-tree"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染树-render-tree"}},[t._v("#")]),t._v(" 渲染树("),s("strong",[t._v("Render Tree")]),t._v(")")]),t._v(" "),s("p",[t._v("Render-Tree也是一种树状结构，由DOM和CSSOM树结合在一起构建。浏览器必须计算每个可见元素的"),s("strong",[t._v("布局")]),t._v("，并将它们"),s("strong",[t._v("绘制")]),t._v("在屏幕上，因为该浏览器使用这个Render-Tree。因此，除非Render-Tree没有被构建，否则任何东西都不会被绘制在屏幕上，这就是为什么我们需要DOM和CSSOM树。")]),t._v(" "),s("p",[t._v("由于Render-Tree是对最终将被打印在屏幕上的东西的低级表示，它不会包含在像素矩阵中不包含任何区域的节点。例如，"),s("code",[t._v("display:none;")]),t._v("元素的尺寸为"),s("code",[t._v("0px X 0px")]),t._v("，因此它们不会出现在Render-Tree中。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(425),alt:"image-20210721192900485"}})]),t._v(" "),s("p",[t._v("从上图可以看出，Render-Tree结合了DOM和CSSOM，生成了一个树状结构，只包含将被绘制在屏幕上的元素。")]),t._v(" "),s("p",[t._v("由于在CSSOM中，位于"),s("code",[t._v("div")]),t._v("内的"),s("code",[t._v("p")]),t._v("元素被设置为"),s("code",[t._v("display:none;")]),t._v("样式，它和它的子元素不会出现在Render-Tree中，因为它在屏幕上不占空间。然而，如果你有"),s("code",[t._v("visibility:hidden")]),t._v("或"),s("code",[t._v("opacity:0")]),t._v("的元素，它们将在屏幕上占据空间，因此它们将出现在Render-Tree中。")]),t._v(" "),s("p",[t._v("与DOM API不同的是，DOM API允许访问浏览器构建的DOM树中的DOM元素，而CSSOM则对用户是隐藏的。但是，由于浏览器将DOM和CSSOM结合起来形成了渲染树，所以浏览器通过提供DOM元素本身的高级API来公开DOM元素的CSSOM节点。这使得开发者能够访问或改变CSSOM节点的CSS属性。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 由于使用JavaScript操作元素的样式超出了本文的范围，所以这里有一个链接，可以看到涵盖了CSSOM API的广泛内容的"),s("a",{attrs:{href:"https://css-tricks.com/an-introduction-and-guide-to-the-css-object-model-cssom/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("CSS技巧文章")]),s("OutboundLink")],1),t._v("。我们还有新的"),s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/03/cssom",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("CSS Typed Object")]),s("OutboundLink")],1),t._v(" API，它是处理元素样式的更精确的方法。")])]),t._v(" "),s("h2",{attrs:{id:"渲染顺序-rendering-sequence"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染顺序-rendering-sequence"}},[t._v("#")]),t._v(" 渲染顺序(Rendering Sequence )")]),t._v(" "),s("p",[t._v("现在我们已经很好地理解了什么是DOM、CSSOM和Render-Tree，让我们来了解一下浏览是如何使用它们渲染一个典型的网页的。对这一过程有一个最基本的了解，对任何网络开发者来说都是至关重要的，因为它将帮助我们设计网站，以获得最大的用户体验（UX）和性能。")]),t._v(" "),s("p",[t._v("当一个网页被加载时，浏览器首先读取HTML文本并从中构建DOM树。然后，它处理CSS，不管是内联的、嵌入的还是外部的CSS，并从中构造出CSSOM树。")]),t._v(" "),s("p",[t._v("在这些树构建完成后，它又从中构建出了Render-Tree。一旦Render-Tree构建完成，浏览器就开始在屏幕上绘制各个元素。")]),t._v(" "),s("h3",{attrs:{id:"布局操作-layout-operation-对渲染树中的单个节点进行布局"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#布局操作-layout-operation-对渲染树中的单个节点进行布局"}},[t._v("#")]),t._v(" 布局操作(Layout operation)——对渲染树中的单个节点进行布局")]),t._v(" "),s("p",[t._v("首先浏览器创建每个单独的Render-Tree节点的布局。布局包括"),s("strong",[t._v("每个节点的尺寸")]),t._v("（像素）和它在屏幕上的绘制位置（"),s("em",[t._v("位置")]),t._v("）。这个过程被称为"),s("strong",[t._v("布局")]),t._v("，因为浏览器正在计算每个节点的布局信息。")]),t._v(" "),s("p",[t._v("这个过程也被称为"),s("strong",[t._v("回流(reflow)"),s("strong",[t._v("或")]),t._v("浏览器回流(browser reflow)")]),t._v("，当你"),s("strong",[t._v("滚动")]),t._v("、"),s("strong",[t._v("调整窗口大小")]),t._v("或"),s("strong",[t._v("操纵DOM")]),t._v("元素时，它也会发生。这里有一个"),s("a",{attrs:{href:"https://stackoverflow.com/a/27637245/2790983",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("列表")]),s("OutboundLink")],1),t._v("的事件，可以触发元素的"),s("strong",[t._v("铺展/回流")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 我们应该避免网页因为微不足道的原因而进行多次布局操作，因为这是一个昂贵的操作。"),s("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/rendering/avoid-large-complex-layouts-and-layout-thrashing",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("这里")]),s("OutboundLink")],1),t._v("是"),s("a",{attrs:{href:"https://twitter.com/aerotwist",target:"_blank",rel:"noopener noreferrer"}},[t._v("Paul Lewis"),s("OutboundLink")],1),t._v("的一篇文章，他谈到了我们如何避免复杂而昂贵的布局操作，以及"),s("a",{attrs:{href:"https://kellegous.com/j/2013/01/26/layout-performance/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("布局激动(layout thrashing)")]),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("h3",{attrs:{id:"绘制操作-paint-operation-绘制各个图层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#绘制操作-paint-operation-绘制各个图层"}},[t._v("#")]),t._v(" "),s("strong",[t._v("绘制操作(Paint operation)")]),t._v("——绘制各个图层")]),t._v(" "),s("p",[t._v("到目前为止，我们有一个需要打印在屏幕上的几何图形的列表。由于Render-Tree中的"),s("strong",[t._v("元素")]),t._v("（"),s("em",[t._v("或一个子树")]),t._v("）可以相互重叠，而且它们可以有CSS属性，使它们经常改变外观、位置或几何形状（如"),s("em",[t._v("动画")]),t._v("），所以浏览器为它创建了一个"),s("strong",[t._v("层")]),t._v("。")]),t._v(" "),s("p",[t._v("创建图层有助于浏览器在网页的整个生命周期内有效地进行绘制操作，例如在滚动或调整浏览器窗口大小时。拥有图层也有助于浏览器按照开发者的意图，正确地以堆叠顺序（"),s("em",[t._v("沿Z轴")]),t._v("）绘制元素。")]),t._v(" "),s("p",[t._v("现在我们有了图层，我们可以把它们结合起来，在屏幕上"),s("strong",[t._v("画")]),t._v("。但是，浏览器不会一次就画出所有的图层。每个图层都是先单独绘制的。")]),t._v(" "),s("p",[t._v("在每个图层中，浏览器为元素的任何可见属性（如边框、背景色、阴影、文本等）填充单个像素。这个过程也被称为"),s("strong",[t._v("光栅化")]),t._v("。为了提高性能，浏览器可以使用不同的"),s("strong",[t._v("线程")]),t._v("来进行光栅化处理。")]),t._v(" "),s("p",[s("strong",[t._v("Photoshop")]),t._v("中的图层类比，也可以应用于浏览器渲染网页的方式。你可以通过Chrome DevTools将网页上的不同层可视化。打开DevTools，从"),s("strong",[t._v("更多工具")]),t._v("选项中，选择"),s("strong",[t._v("图层")]),t._v("。你也可以从"),s("strong",[t._v("渲染")]),t._v("面板上看到层的边界。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 栅格化通常是在CPU中完成的，这使得它很慢而且很昂贵，但我们现在有新的技术可以在GPU中完成，以提高性能。这篇"),s("a",{attrs:{href:"https://software.intel.com/en-us/articles/software-vs-gpu-rasterization-in-chromium",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("intel article")]),s("OutboundLink")],1),t._v("详细介绍了"),s("strong",[t._v("绘制")]),t._v("的主题，是必须阅读的。要详细了解图层的概念，"),s("a",{attrs:{href:"https://www.html5rocks.com/en/tutorials/speed/layers/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("这篇")]),s("OutboundLink")],1),t._v("是一篇必须阅读的文章。")])]),t._v(" "),s("h3",{attrs:{id:"合成操作-compositing-operation-利用gpu-合成各个图层"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合成操作-compositing-operation-利用gpu-合成各个图层"}},[t._v("#")]),t._v(" 合成操作(Compositing operation)——（利用GPU）合成各个图层")]),t._v(" "),s("p",[t._v("到目前为止，我们还没有在屏幕上绘制一个像素。我们所拥有的是不同的图层（"),s("em",[t._v("bitmap图像")]),t._v("），它们应该按照特定的顺序绘制在屏幕上。在"),s("strong",[t._v("合成")]),t._v("操作中，这些图层被发送到GPU，最终在屏幕上绘制。")]),t._v(" "),s("p",[t._v("发送整个图层来绘制显然是低效的，因为每次有"),s("strong",[t._v("回流")]),t._v("("),s("em",[t._v("layout")]),t._v(")或"),s("a",{attrs:{href:"https://stackoverflow.com/questions/2549296/whats-the-difference-between-reflow-and-repaint",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("重绘")]),s("OutboundLink")],1),t._v("时都必须这样做。因此，一个图层被分解成不同的"),s("strong",[t._v("瓷砖(tiles)")]),t._v("，然后将在屏幕上绘制。你也可以在Chrome的DevTool渲染面板中直观地看到这些瓷砖。")]),t._v(" "),s("p",[t._v("从上述信息中，我们可以构建一个浏览器从一个网页到在屏幕上呈现事物的事件序列，从简单的HTML和CSS文本内容。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(426),alt:"image-20210721201457384"}})]),t._v(" "),s("p",[t._v("这一系列事件也被称为"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("关键渲染路径(CRP,critical rendering path)")]),s("OutboundLink")],1),t._v("。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" "),s("a",{attrs:{href:"https://twitter.com/kosamari",target:"_blank",rel:"noopener noreferrer"}},[t._v("小坂真理子"),s("OutboundLink")],1),t._v("写了一篇关于这个过程的"),s("a",{attrs:{href:"https://developers.google.com/web/updates/2018/09/inside-browser-part3",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("美丽的文章")]),s("OutboundLink")],1),t._v("，有很酷的插图和对每个概念更广泛的解释。强烈推荐。")])]),t._v(" "),s("h3",{attrs:{id:"浏览器引擎-browser-engines"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器引擎-browser-engines"}},[t._v("#")]),t._v(" 浏览器引擎(Browser engines)")]),t._v(" "),s("p",[t._v("创建DOM树、CSSOM树和处理渲染逻辑的工作是通过一个叫做"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Browser_engine",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("浏览器引擎")]),s("OutboundLink")],1),t._v("（"),s("em",[t._v("也被称为")]),s("strong",[t._v("渲染引擎")]),t._v(" "),s("em",[t._v("或")]),s("strong",[t._v("布局引擎")]),t._v("）的软件完成的，它驻留在浏览器内。这个浏览器引擎包含所有必要的元素和逻辑，将网页从HTML代码渲染成屏幕上的实际像素。")]),t._v(" "),s("p",[t._v("如果你听到人们谈论"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/WebKit",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("WebKit")]),s("OutboundLink")],1),t._v("，他们是在谈论一个浏览器引擎。"),s("strong",[t._v("WebKit")]),t._v("被苹果的Safari浏览器使用，并且是谷歌Chrome浏览器的默认渲染引擎。截至目前，"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chromium_(web_browser)",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Chromium")]),s("OutboundLink")],1),t._v("项目使用"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Blink_(browser_engine)",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Blink")]),s("OutboundLink")],1),t._v("作为默认渲染引擎。"),s("a",{attrs:{href:"https://stackoverflow.com/a/3468311/2790983",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("这里有一个列表")]),s("OutboundLink")],1),t._v("是一些顶级网络浏览器所使用的不同的浏览器引擎。")]),t._v(" "),s("h2",{attrs:{id:"浏览器中的渲染进程-rendering-process-in-browsers"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器中的渲染进程-rendering-process-in-browsers"}},[t._v("#")]),t._v(" 浏览器中的渲染进程("),s("strong",[t._v("Rendering Process in browsers")]),t._v(")")]),t._v(" "),s("p",[t._v("我们都知道，JavaScript语言是通过"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/ECMAScript",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("ECMAScript")]),s("OutboundLink")],1),t._v("标准来规范的，事实上，由于"),s("a",{attrs:{href:"https://dev.to/theoutlander/oracle-owns-the-trademark-to-javascript-1fil",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript是注册商标"),s("OutboundLink")],1),t._v("，我们现在只叫它ECMAScript。因此，每一个JavaScript引擎供应商，如"),s("a",{attrs:{href:"http://v8.dev/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("V8")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Chakra_(JavaScript_engine)",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Chakra")]),s("OutboundLink")],1),t._v("、"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Spider Monkey")]),s("OutboundLink")],1),t._v("等，都必须遵守这个标准的规定。")]),t._v(" "),s("p",[t._v("有了一个标准，我们就可以在所有的JavaScript运行时（如浏览器、Node、Deno等）中获得一致的JavaScript体验。这对于多平台的JavaScript（"),s("em",[t._v("和网络")]),t._v("）应用程序的一致和无缺陷的开发是非常好的。")]),t._v(" "),s("p",[s("strong",[t._v("然而，浏览器渲染事物的方式却不是这样的。HTML、CSS或JavaScript，这些语言是由某个实体或某个组织标准化的。然而，浏览器如何将它们结合在一起在屏幕上呈现东西，却没有标准化。谷歌浏览器的引擎与Safari浏览器的引擎做的事情可能不一样。")])]),t._v(" "),s("p",[t._v("因此，我们很难预测某个特定浏览器的渲染顺序及其背后的机制。不过，"),s("a",{attrs:{href:"https://html.spec.whatwg.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTML5规范"),s("OutboundLink")],1),t._v("已经做出了一些努力，在理论上规范了"),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/rendering.html",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("渲染")]),s("OutboundLink")],1),t._v("应该如何工作，但浏览器如何遵守这一标准，完全取决于它们。")]),t._v(" "),s("p",[t._v("尽管有这些不一致的地方，但有一些共同的原则，通常在所有的浏览器中都是一样的。让我们来了解一下浏览器在屏幕上渲染东西的常用方法以及这个过程的生命周期事件。为了了解这个过程，我准备了一个"),s("a",{attrs:{href:"https://github.com/course-one/browser-rendering-test",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("小项目")]),s("OutboundLink")],1),t._v("来测试不同的渲染方案（"),s("em",[t._v("下面")]),t._v("个链接）。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/course-one/browser-rendering-test/tree/master",target:"_blank",rel:"noopener noreferrer"}},[t._v("course-one/browser-rendering-test"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"解析和外部资源-parsing-and-external-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解析和外部资源-parsing-and-external-resources"}},[t._v("#")]),t._v(" 解析和外部资源（Parsing and External Resources）")]),t._v(" "),s("p",[s("strong",[t._v("解析")]),t._v("是读取HTML内容并从中构建一个DOM树的过程。因此，这个过程也被称为"),s("strong",[t._v("DOM解析")]),t._v("，做这个工作的程序被称为"),s("strong",[t._v("DOM解析器")]),t._v("。")]),t._v(" "),s("p",[t._v("大多数浏览器都提供了"),s("code",[t._v("DOMParser")]),t._v("网络应用程序接口，以便从HTML代码中构建一个DOM树。"),s("code",[t._v("DOMParser")]),t._v("类的一个实例代表一个DOM解析器，使用 "),s("code",[t._v("parseFromString")]),t._v("原型方法，我们可以将原始的HTML文本（"),s("em",[t._v("代码")]),t._v("）解析成一个DOM树（"),s("em",[t._v("如下图所示")]),t._v("）。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(427),alt:"image-20210721202753565"}})]),t._v(" "),s("p",[t._v("当浏览器请求一个网页，而服务器响应一些HTML文本（有"),s("code",[t._v("Content-Type")]),t._v(" "),s("em",[t._v("header设置为"),s("code",[t._v("text/html")])]),t._v("）时，只要有几个字符或整个文档的几行，浏览器就可以开始"),s("strong",[t._v("解析")]),t._v("HTML。因此，浏览器可以"),s("strong",[t._v("递增地")]),t._v("建立DOM树，一次一个"),s("strong",[t._v("节点")]),t._v("。浏览器对HTML的解析是由上至下的，而不是在中间的任何地方，因为HTML代表了一个嵌套的树状结构。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(428),alt:"1_1bcaVVjG_077zHVzGfHUyw"}})]),t._v(" "),s("p",[t._v("在上面的例子中，我们从Node服务器上访问了"),s("code",[t._v("incremental.html")]),t._v("文件，并将网络速度设置为只有"),s("strong",[t._v("10kbps")]),t._v("（从网络面板*）。由于浏览器加载（"),s("em",[t._v("下载")]),t._v("）这个文件需要很长时间（"),s("em",[t._v("因为它包含1000个"),s("code",[t._v("h1")]),t._v("元素")]),t._v("），浏览器从最初的几个字节构建一个DOM树，并将它们打印在屏幕上（"),s("em",[t._v("因为它在后台下载HTML文件的剩余内容")]),t._v("）。")]),t._v(" "),s("p",[t._v("如果你看一下上述请求的"),s("strong",[t._v("性能")]),t._v("图，你就能在"),s("strong",[t._v("计时")]),t._v("行看到一些"),s("strong",[t._v("事件")]),t._v("。这些事件通常被称为"),s("a",{attrs:{href:"https://web.dev/user-centric-performance-metrics/#important-metrics-to-measure",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("性能指标")]),s("OutboundLink")],1),t._v("。当这些事件被放置在"),s("strong",[t._v("尽可能接近")]),t._v("的地方，并"),s("strong",[t._v("尽可能早")]),t._v("地发生，更好的"),s("strong",[t._v("用户体验")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 使用"),s("code",[t._v("性能")]),t._v("选项卡中的"),s("strong",[t._v("⟳")]),t._v("图标来捕捉性能曲线。")])]),t._v(" "),s("p",[s("code",[t._v("FP")]),t._v("是"),s("strong",[t._v("First Paint")]),t._v("的缩写，指的是浏览器开始在屏幕上绘制东西的时间（"),s("em",[t._v("可能是简单到body背景颜色的第一个像素")]),t._v("）。")]),t._v(" "),s("p",[s("code",[t._v("FCP")]),t._v(" 是"),s("strong",[t._v("First Contentful Paint")]),t._v("的缩写，指的是浏览器呈现内容（如"),s("strong",[t._v("文本")]),t._v("或"),s("strong",[t._v("图像")]),t._v("）的第一个像素的时间。"),s("code",[t._v("LCP")]),t._v(" 是 "),s("strong",[t._v("Largest Contentful Paint")]),t._v("的缩写，指的是浏览器呈现大段文字或图像的时间。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 你可能听说过"),s("strong",[t._v("FMP")]),t._v("（"),s("em",[t._v("first meaningful paint 首次有意义的绘制")]),t._v("），这也是一个类似于"),s("strong",[t._v("LCP")]),t._v("的指标，但它已被Chrome浏览器放弃，转而采用"),s("strong",[t._v("LCP")]),t._v("。")])]),t._v(" "),s("p",[s("code",[t._v("L")]),t._v("代表 "),s("code",[t._v("onload")]),t._v("事件，是由浏览器在 "),s("code",[t._v("window")]),t._v("对象上发出的。同样，"),s("code",[t._v("DCL")]),t._v("代表"),s("code",[t._v("DOMContentLoaded")]),t._v("事件，它是在"),s("code",[t._v("document")]),t._v("对象上发出的，但它会涌向"),s("code",[t._v("window")]),t._v("，因此你也可以在"),s("code",[t._v("window")]),t._v("上监听它。这些事件的理解有点复杂，所以我们将稍稍讨论一下。")]),t._v(" "),s("p",[t._v("每当浏览器遇到一个"),s("strong",[t._v("外部资源")]),t._v("，例如通过"),s("code",[t._v('<script src="url">/script>')]),t._v("元素的"),s("strong",[t._v("脚本")]),t._v("文件（"),s("em",[t._v("JavaScript")]),t._v("），通过"),s("code",[t._v('<link rel="stylesheet" href="url"/>')]),t._v("标签的"),s("strong",[t._v("样式表")]),t._v("文件（"),s("em",[t._v("CSS")]),t._v("），通过"),s("code",[t._v('<img src="url" />')]),t._v("元素的图像文件或任何其他外部资源，浏览器将在后台开始下载该文件（"),s("em",[t._v("远离JavaScript执行的")]),s("strong",[t._v("主线程")]),t._v("）。")]),t._v(" "),s("p",[t._v("最重要的是要记住，DOM解析通常发生在"),s("strong",[t._v("主线程")]),t._v("上。因此，如果JavaScript的主执行线程很忙，DOM解析将不会进行，直到该线程空闲。你可能会问，为什么这一点如此重要？因为 "),s("code",[t._v("脚本")]),t._v("元素是"),s("strong",[t._v("解析器阻断的（parser-blocking）")]),t._v("。除了脚本（"),s("code",[t._v(".js")]),t._v("）文件请求，每一个外部文件请求，如"),s("strong",[t._v("图片")]),t._v("、"),s("strong",[t._v("样式表")]),t._v("、"),s("strong",[t._v("pdf")]),t._v("、"),s("strong",[t._v("视频")]),t._v("等，都不会阻塞DOM构建（"),s("strong",[t._v("解析")]),t._v("）。")]),t._v(" "),s("h3",{attrs:{id:"阻断解析器的脚本-parser-blocking-scripts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻断解析器的脚本-parser-blocking-scripts"}},[t._v("#")]),t._v(" 阻断解析器的脚本(Parser-Blocking Scripts)")]),t._v(" "),s("p",[t._v("一个"),s("strong",[t._v("解析器阻断脚本")]),t._v("是一个脚本（"),s("em",[t._v("JavaScript")]),t._v('）文件/代码，它停止了对HTML的解析。当浏览器遇到一个 "脚本 "元素时，如果它是一个嵌入的脚本，那么它将'),s("strong",[t._v("执行")]),t._v("该脚本，然后继续解析HTML以构建DOM树。因此，所有的"),s("strong",[t._v("嵌入式脚本都是解析器阻塞的")]),t._v("，讨论结束。")]),t._v(" "),s("p",[t._v("如果 "),s("code",[t._v("script")]),t._v("元素是一个"),s("strong",[t._v("外部脚本文件")]),t._v("，浏览器将在主线程之外开始下载外部脚本文件，但它将"),s("strong",[t._v("停止主线程的执行")]),t._v("，直到该文件下载完毕。这意味着在下载脚本文件之前不会再进行DOM解析。")]),t._v(" "),s("p",[t._v("一旦脚本文件被下载，浏览器将首先在主线程上"),s("strong",[t._v("执行")]),t._v("下载的脚本文件（"),s("em",[t._v("明显")]),t._v("），然后继续进行DOM解析。如果浏览器再次发现HTML中的另一个 "),s("code",[t._v("脚本")]),t._v("元素，它将执行同样的操作。那么，为什么浏览器要停止DOM解析，直到JavaScript被下载和执行？")]),t._v(" "),s("p",[t._v("浏览器将DOM API暴露给JavaScript运行时，这意味着我们可以从JavaScript中访问和操作DOM元素。这就是诸如"),s("strong",[t._v("React")]),t._v("和"),s("strong",[t._v("Angular")]),t._v("等动态网页框架的工作方式。但是，如果浏览器希望"),s("strong",[t._v("平行")]),t._v("地运行DOM解析和脚本执行，那么在DOM解析器线程和主线程之间可能存在"),s("a",{attrs:{href:"https://stackoverflow.com/questions/34510/what-is-a-race-condition",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("竞赛条件")]),s("OutboundLink")],1),t._v("，这就是为什么DOM解析必须发生在主线程上。")]),t._v(" "),s("p",[t._v("然而，在大多数情况下，在后台下载脚本文件时停止 DOM 解析是完全不必要的。因此，HTML5为"),s("code",[t._v("script")]),t._v("标签提供了"),s("code",[t._v("async")]),t._v("属性。当DOM解析器遇到带有"),s("code",[t._v("async")]),t._v("属性的外部"),s("code",[t._v("script")]),t._v("元素时，它不会在后台下载脚本文件时停止解析过程。但是一旦该文件被下载完成，解析就会停止，脚本（"),s("em",[t._v("代码")]),t._v("）将被执行。")]),t._v(" "),s("p",[t._v("我们还有一个神奇的"),s("code",[t._v("defer")]),t._v("属性用于"),s("code",[t._v("script")]),t._v("元素，其工作原理与"),s("code",[t._v("async")]),t._v("属性类似，但与"),s("code",[t._v("async")]),t._v("属性不同的是，即使文件被完全下载，脚本"),s("strong",[t._v("也不执行")]),t._v("。所有的"),s("code",[t._v("defer")]),t._v("脚本都是在解析器解析完所有HTML后执行的，这意味着DOM树已经完全构建完毕。与"),s("code",[t._v("async")]),t._v("脚本不同，所有"),s("code",[t._v("defer")]),t._v("脚本都是按照它们在HTML文档（"),s("em",[t._v("或DOM树")]),t._v("）中出现的顺序执行。")]),t._v(" "),s("p",[t._v("所有正常的脚本（"),s("em",[t._v("嵌入式或外部")]),t._v("）都是"),s("strong",[t._v("解析器阻塞的")]),t._v("，因为它们会停止DOM的构建。所有的"),s("code",[t._v("async")]),t._v("脚本（"),s("em",[t._v("即 异步脚本")]),t._v("）在被下载之前不会阻塞解析器。一旦"),s("code",[t._v("async")]),t._v("脚本被下载完成，它就会成为解析器阻塞的对象。然而，所有的"),s("code",[t._v("defer")]),t._v("脚本（"),s("em",[t._v("即 deferred scripts")]),t._v("）都是"),s("strong",[t._v("非解析器阻塞的")]),t._v("脚本，因为它们不会阻塞解析器，而是在DOM树被完全构建后执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(429),alt:"1_5xdQ1j6Ai2PZYCRQuXM5wg"}})]),t._v(" "),s("p",[t._v("在上面的例子中，"),s("code",[t._v("parser-blocking.html")]),t._v("文件在30个元素之后包含一个"),s("strong",[t._v("parser-blocking")]),t._v("脚本，这就是为什么浏览器一开始显示30个元素，停止DOM解析，并开始加载脚本文件。第二个脚本文件不会阻止解析，因为它有"),s("code",[t._v("defer")]),t._v("属性，所以一旦DOM树被完全构建，它就会执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:r(430),alt:"1_pxkIXo-LvXEkGaJJeR9cyA"}})]),t._v(" "),s("p",[t._v("如果我们看一下"),s("strong",[t._v("性能")]),t._v("面板，"),s("code",[t._v("FP")]),t._v("和 "),s("code",[t._v("FCP")]),t._v("会尽快发生（"),s("em",[t._v("隐藏在")]),s("strong",[t._v("Timings")]),t._v(" "),s("em",[t._v("label")]),t._v("后面），因为一旦有了一些HTML内容，浏览器就开始建立一个DOM树，因此它可以在屏幕上渲染一些像素。")]),t._v(" "),s("p",[s("code",[t._v("LCP")]),t._v("在5秒后发生，因为解析器阻断脚本阻断了DOM解析5秒（"),s("em",[t._v("其下载时间")]),t._v("），当DOM解析器被阻断时，只有30个文本元素被渲染在屏幕上，这不足以被称为最大内容的绘制(LCP, largest contentful paint)（"),s("em",[t._v("根据谷歌浏览器标准")]),t._v("）。但是，一旦脚本被下载并执行，DOM解析就恢复了，屏幕上呈现了大量的内容，这导致了"),s("code",[t._v("LCP")]),t._v("事件的触发。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" "),s("strong",[t._v("Parser-blocking")]),t._v("也被称为"),s("strong",[t._v("render-blocking")]),t._v("，因为除非DOM树被构建，否则渲染不会发生，但这两者是完全不同的事情，我们将在后面看到。")])]),t._v(" "),s("p",[t._v("一些浏览器可能采用了"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Glossary/speculative_parsing",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("累积解析(speculative parsing)")]),s("OutboundLink")],1),t._v("策略，将HTML解析（"),s("em",[t._v("但不是DOM树的构建")]),t._v("）卸载到一个单独的线程，这样浏览器就可以读取诸如"),s("code",[t._v("link")]),t._v("("),s("em",[t._v("CSS")]),t._v(")、"),s("code",[t._v("script")]),t._v("、"),s("code",[t._v("img")]),t._v("等元素，并"),s("strong",[t._v("急切地")]),t._v("下载这些资源。")]),t._v(" "),s("p",[t._v("如果你有三个"),s("code",[t._v("script")]),t._v("元素相继出现，这是很有帮助的，但由于DOM解析器在第一个脚本下载完毕之前无法读取第二个"),s("code",[t._v("script")]),t._v("元素，浏览器将无法开始下载第二个脚本。我们可以通过使用"),s("code",[t._v("async")]),t._v("标签轻松解决这个问题，但异步脚本不能保证按顺序执行。")]),t._v(" "),s("p",[t._v("之所以叫推测性解析，是因为浏览器在做一个"),s("strong",[t._v("推测(sepculation)")]),t._v("，即某一资源预计会在未来加载，所以最好现在就在后台加载它。然而，如果一些JavaScript操作DOM，并删除/隐藏了有外部资源的元素，那么推测就会失败，这些文件就白白加载了。太难了。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 每个浏览器都有自己的想法，所以不能保证何时或是否会发生推测性解析。然而，你可以使用"),s("code",[t._v('<link rel="preload">')]),t._v("元素要求浏览器提前加载一些资源。")])]),t._v(" "),s("h3",{attrs:{id:"渲染阻塞的css-render-blocking-css"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染阻塞的css-render-blocking-css"}},[t._v("#")]),t._v(" 渲染阻塞的CSS（Render-Blocking CSS）")]),t._v(" "),s("p",[t._v("正如我们所了解的，除了解析器阻塞的脚本文件，任何外部资源请求都不会阻塞DOM解析过程。因此，CSS（"),s("em",[t._v("包括嵌入的")]),t._v("）不会阻止DOM解析器...（"),s("em",[t._v("等待它")]),t._v("）..."),s("strong",[t._v("直接地")]),t._v("。是的，"),s("strong",[t._v("CSS可以阻止DOM解析")]),t._v("，但为此，我们需要了解渲染过程。")]),t._v(" "),s("p",[t._v("浏览器内部的引擎根据从服务器收到的作为文本文档的HTML内容构建DOM树。同样，它也从样式表内容中构建"),s("strong",[t._v("CSSOM")]),t._v("树，例如从外部CSS文件或HTML中嵌入（"),s("em",[t._v("以及内联")]),t._v("）的CSS。")]),t._v(" "),s("p",[t._v("DOM和CSSOM树的构建都发生在主线程上，这些树是"),s("strong",[t._v("同时构建的")]),t._v("。它们一起形成了"),s("strong",[t._v("渲染树")]),t._v("，用来在屏幕上绘制东西，而这也是在DOM树被构建的过程中逐步建立的。")]),t._v(" "),s("p",[t._v("我们已经知道，DOM树的生成是"),s("strong",[t._v("递增")]),t._v("的，这意味着当浏览器读取HTML时，它会向DOM树中添加DOM元素。但是，CSSOM树的情况却不是这样。与DOM树不同，CSSOM树的构建是"),s("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/Performance/Critical_rendering_path#CSS_Object_Model",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("不递增的")]),s("OutboundLink")],1),t._v("，必须以特定的方式进行。")]),t._v(" "),s("p",[t._v("当浏览器找到"),s("code",[t._v("<style>")]),t._v("块时，它将解析所有嵌入的CSS，并用新的CSS（"),s("em",[t._v("style")]),t._v("）规则更新CSSOM树。此后，它将继续以正常方式解析HTML。内嵌式样式设计也是如此。")]),t._v(" "),s("p",[t._v("然而，当浏览器遇到一个外部样式表文件时，情况就会发生很大的变化。与外部脚本文件不同，外部样式表文件不是解析器阻塞资源，因此浏览器可以在后台默默地下载它，并且DOM解析会继续进行。")]),t._v(" "),s("p",[t._v("但与HTML文件不同（"),s("em",[t._v("用于DOM构建")]),t._v("），浏览器不会一个字节一个字节地处理样式表文件的内容。这是因为浏览器不能在读取CSS内容时逐步构建CSSOM树。原因是，文件末尾的CSS规则可能会覆盖写在文件顶部的CSS规则。")]),t._v(" "),s("p",[t._v("因此，如果浏览器在解析样式表内容时开始增量地构建CSSOM，就会导致"),s("strong",[t._v("渲染树")]),t._v("的多次渲染，因为相同的CSSOM节点会因为样式表文件中稍后出现的"),s("strong",[t._v("样式覆盖规则")]),t._v("而被更新。当CSS被解析时，看到元素在屏幕上改变样式，这将是一个令人不快的用户体验。由于CSS样式是"),s("a",{attrs:{href:"https://stackoverflow.com/a/1043046/2790983",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("层叠")]),s("OutboundLink")],1),t._v("，一个规则的改变可以影响许多元素。")]),t._v(" "),s("p",[t._v("因此，浏览器不会逐步处理外部的CSS文件，CSSOM树的更新是在样式表中所有的CSS规则被处理后一次性进行的。一旦完成了CSSOM树的更新，那么"),s("strong",[t._v("渲染树")]),t._v("就会被更新，然后被渲染到屏幕上。")]),t._v(" "),s("p",[t._v("CSS是一种"),s("strong",[t._v("渲染阻断的")]),t._v("资源。一旦浏览器提出获取外部样式表的请求，"),s("strong",[t._v("渲染树的构建就会停止")]),t._v("。因此，"),s("strong",[t._v("关键渲染路径")]),t._v("（"),s("em",[t._v("CRP")]),t._v("）也被卡住，屏幕上没有任何东西被渲染出来，如下图所示。然而，在后台下载样式表的同时，DOM树的构建仍在进行中。"),s("img",{attrs:{src:r(431),alt:"1_y3QmSfyergjmVV32nH7tPA"}})]),t._v(" "),s("p",[t._v("浏览器可以使用CSSOM树的旧状态来生成"),s("strong",[t._v("Render Tree")]),t._v("，因为HTML正在被解析，以逐步在屏幕上渲染东西。但这有一个巨大的缺点。在这种情况下，一旦样式表被下载和解析，并且CSSOM被更新，Render Tree就会被更新并呈现在屏幕上。现在，用旧的CSSOM生成的Render Tree节点将被"),s("strong",[t._v("用新的样式重新绘制")]),t._v("，这也可能导致"),s("a",{attrs:{href:"https://webkit.org/blog/66/the-fouc-problem/",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("Flash of Unstyled Content")]),s("OutboundLink")],1),t._v(" ("),s("em",[t._v("FOUC")]),t._v(")，这对用户体验非常不利。")]),t._v(" "),s("p",[t._v("因此，浏览器会等待，直到样式表被加载和解析。一旦样式表被解析并且CSSOM被更新，Render Tree就会被更新，"),s("strong",[t._v("CRP就会被解禁")]),t._v("，这就导致Render Tree在屏幕上被绘制。由于这个原因，建议尽可能早地加载所有的外部样式表，可能在"),s("code",[t._v("head")]),t._v("部分。")]),t._v(" "),s("p",[t._v("让我们想象一下这样的场景：浏览器已经开始解析HTML，它遇到了一个外部样式表文件。它将在后台开始下载该文件，阻止CRP，并继续进行DOM解析。但随后它遇到了一个"),s("code",[t._v("script")]),t._v("标签。所以它将开始下载外部脚本文件，并阻止DOM解析。现在，浏览器正闲置着，等待样式表和脚本文件完全下载。")]),t._v(" "),s("p",[t._v("但是这一次，外部脚本文件已经被"),s("strong",[t._v("完全下载")]),t._v("，而样式表仍在后台下载。浏览器应该执行该脚本文件吗？这样做有什么危害吗？")]),t._v(" "),s("p",[t._v("正如我们所知，CSSOM提供了一个高级别的JavaScript API来与DOM元素的"),s("strong",[t._v("样式")]),t._v("进行交互。例如，你可以使用"),s("code",[t._v("elem.style.backgroundColor")]),t._v("属性读取或更新一个DOM元素的背景颜色。与"),s("code",[t._v("elem")]),t._v("元素相关的"),s("code",[t._v("style")]),t._v("对象暴露了CSSOM的API，还有许多其他的API可以做同样的事情（*阅读此"),s("a",{attrs:{href:"https://css-tricks.com/an-introduction-and-guide-to-the-css-object-model-cssom/",target:"_blank",rel:"noopener noreferrer"}},[s("em",[t._v("css-tricks文章")]),s("OutboundLink")],1),t._v(")。")]),t._v(" "),s("p",[t._v("由于样式表是在后台下载的，JavaScript仍然可以执行，因为主线程没有被加载的样式表所阻断。如果我们的JavaScript程序访问一个DOM元素的CSS属性（"),s("em",[t._v("通过CSSOM API")]),t._v("），我们将得到一个适当的值（"),s("em",[t._v("根据CSSOM的当前状态")]),t._v("）。")]),t._v(" "),s("p",[t._v("但是，一旦样式表被下载和解析，从而导致CSSOM更新，我们的JavaScript现在有一个不好的元素的CSS值，因为新的CSSOM更新可能已经改变了该DOM元素的CSS属性。由于这个原因，在样式表被下载时执行JavaScript是不安全的。")]),t._v(" "),s("p",[t._v("根据"),s("a",{attrs:{href:"https://html.spec.whatwg.org/multipage/semantics.html#interactions-of-styling-and-scripting",target:"_blank",rel:"noopener noreferrer"}},[s("strong",[t._v("HTML5规范")]),s("OutboundLink")],1),t._v("，浏览器可以下载一个脚本文件，但它不会执行它，除非之前的所有样式表都被解析了。当一个样式表阻止一个脚本的执行时，它被称为"),s("strong",[t._v("脚本阻断（script-blocking）"),s("strong",[t._v("样式表或")]),t._v("脚本阻断")]),t._v("的CSS。"),s("img",{attrs:{src:r(432),alt:"1_atsh0R6Do25SriYvvskkgA"}})]),t._v(" "),s("p",[t._v("在上面的例子中，"),s("code",[t._v("script-blocking.html")]),t._v("包含一个"),s("code",[t._v("link")]),t._v("标签（"),s("em",[t._v("针对外部样式表")]),t._v("），然后是一个"),s("code",[t._v("script")]),t._v("标签（"),s("em",[t._v("针对外部JavaScript")]),t._v("）。在这里，脚本的下载速度非常快，没有任何延迟，但样式表的下载需要6秒钟。因此，尽管从"),s("strong",[t._v("网络")]),t._v("面板上可以看到脚本被完全下载，但它并没有被浏览器立即执行。只有在样式表加载完毕后，我们才看到脚本记录的 "),s("code",[t._v("Hello World")]),t._v("信息。")]),t._v(" "),s("blockquote",[s("p",[s("em",[t._v("💡")]),t._v(" 就像 "),s("code",[t._v("async")]),t._v("或 "),s("code",[t._v("defer")]),t._v("属性使 "),s("code",[t._v("script")]),t._v("元素成为"),s("strong",[t._v("非解析器阻塞")]),t._v("一样，外部样式表也可以通过 "),s("code",[t._v("media")]),t._v("属性被标记为"),s("strong",[t._v("非渲染器阻塞")]),t._v("。通过使用"),s("code",[t._v("media")]),t._v("属性值，浏览器可以明智地决定何时加载样式表。")])]),t._v(" "),s("h3",{attrs:{id:"文档的-domcontentloaded-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文档的-domcontentloaded-事件"}},[t._v("#")]),t._v(" 文档的 "),s("code",[t._v("DOMContentLoaded")]),t._v(" 事件")]),t._v(" "),s("p",[s("code",[t._v("DOMContentLoaded")]),t._v("（"),s("strong",[t._v("DCL")]),t._v("）事件标志着浏览器已经从所有可用的HTML中构建了一个完整的DOM树。但是，当 "),s("code",[t._v("DCL")]),t._v("事件被触发时，有很多因素会发生变化。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DOMContentLoaded'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DOM is fully parsed!'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("如果我们的HTML不包含任何脚本，DOM解析就不会被阻止，"),s("code",[t._v("DCL")]),t._v("会在浏览器能够解析整个HTML的时候迅速启动。如果我们有阻挡解析器的脚本，那么"),s("code",[t._v("DCL")]),t._v("必须等待所有阻挡解析器的脚本被下载并执行。")]),t._v(" "),s("p",[t._v("当样式表被扔进画面时，事情变得有点复杂。即使你没有外部脚本，"),s("code",[t._v("DCL")]),t._v("也会等到所有样式表加载完毕。因为"),s("code",[t._v("DCL")]),t._v("标志着整个DOM树已经准备好了，但是除非CSSOM也完全构建好了，否则DOM是不能安全访问的（"),s("em",[t._v("对于样式信息")]),t._v("）。因此，大多数浏览器会等到所有的外部样式表都被加载和解析。")]),t._v(" "),s("p",[t._v("脚本阻断样式表显然会延迟"),s("code",[t._v("DCL")]),t._v("。在这种情况下，由于脚本在等待样式表的加载，DOM树没有被构建。")]),t._v(" "),s("p",[s("code",[t._v("DCL")]),t._v("是网站性能指标之一。我们应该优化"),s("code",[t._v("DCL")]),t._v("，使其尽可能小（"),s("em",[t._v("它发生的时间")]),t._v("）。最好的做法之一是尽可能为 "),s("code",[t._v("脚本")]),t._v("元素使用 "),s("code",[t._v("defer")]),t._v("和 "),s("code",[t._v("async")]),t._v("标签，这样当脚本在后台下载时，浏览器可以执行其他事情。其次，我们应该优化"),s("strong",[t._v("脚本阻断")]),t._v("和"),s("strong",[t._v("渲染阻断")]),t._v("的样式表。")]),t._v(" "),s("h3",{attrs:{id:"window的-load-事件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#window的-load-事件"}},[t._v("#")]),t._v(" Window的 "),s("code",[t._v("load")]),t._v(" 事件")]),t._v(" "),s("p",[t._v("我们知道，JavaScript可以阻止DOM树的生成，但对于外部样式表和文件，如图片、视频等，则不是这样的。")]),t._v(" "),s("p",[s("code",[t._v("DOMContentLoaded")]),t._v("事件标志着一个时间点，即DOM树被完全构建，并且可以安全访问。"),s("code",[t._v("window.onload")]),t._v("事件标志着一个时间点，即外部样式表和文件被下载，我们的Web应用程序（"),s("em",[t._v("完整")]),t._v("）已完成下载。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'load'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Page is fully loaded!'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[s("img",{attrs:{src:r(433),alt:"1_DuLBecXpJjFh1qnakXjWWg"}})]),t._v(" "),s("p",[t._v("在上面的例子中，"),s("code",[t._v("rendering.html")]),t._v("文件在"),s("code",[t._v("head")]),t._v("部分有一个外部样式表，需要5秒左右的时间来下载。由于它在"),s("code",[t._v("head")]),t._v("部分，"),s("code",[t._v("FP")]),t._v("和"),s("code",[t._v("FCP")]),t._v("在5秒后发生，因为样式表会阻止它下面的任何内容的渲染（"),s("em",[t._v("因为它阻止CRP")]),t._v("）。")]),t._v(" "),s("p",[t._v("在这之后，我们有一个"),s("code",[t._v("img")]),t._v("元素，它加载了一张图片，大约需要10秒钟的时间来下载。因此，浏览器会在后台不断下载这个文件，并继续进行DOM解析和渲染（"),s("em",[t._v("因为外部图像资源既不会阻塞解析器，也不会阻塞渲染")]),t._v("）。")]),t._v(" "),s("p",[t._v("接下来，我们有三个外部的JavaScript文件，它们分别需要3s、6s和9s的时间来下载，最重要的是，它们不是"),s("code",[t._v("同步")]),t._v("的。这意味着总的加载时间应该接近"),s("strong",[t._v("18秒")]),t._v("，因为在执行前一个脚本之前，后面的脚本不会开始下载。然而，看一下"),s("code",[t._v("DCL")]),t._v("事件，我们的浏览器似乎使用了"),s("strong",[t._v("推测的策略(speculative strategy)")]),t._v("，急切地下载脚本文件，所以总的加载时间接近"),s("strong",[t._v("9秒")]),t._v("。")]),t._v(" "),s("p",[t._v("由于最后一个可以影响 "),s("code",[t._v("DCL")]),t._v("的文件是最后一个脚本文件，加载时间为"),s("strong",[t._v("9秒")]),t._v("（"),s("em",[t._v("由于样式表已经在5秒内下载完毕")]),t._v("），"),s("code",[t._v("DCL")]),t._v("事件发生在"),s("strong",[t._v("9.1秒")]),t._v("左右。")]),t._v(" "),s("p",[t._v("我们还有另一个外部资源，就是图片文件，它在后台一直在加载。一旦它被完全下载（"),s("em",[t._v("需要10秒")]),t._v("），窗口的"),s("code",[t._v("load")]),t._v("事件在"),s("strong",[t._v("10.2")]),t._v("秒后被触发，这标志着网页（"),s("em",[t._v("应用程序")]),t._v("）已经完全加载。")])])}),[],!1,null,null,null);e.default=n.exports}}]);