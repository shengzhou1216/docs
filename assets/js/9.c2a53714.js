(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{474:function(a,t,s){a.exports=s.p+"assets/img/image-20210627201714580.d64e6f00.png"},475:function(a,t,s){a.exports=s.p+"assets/img/image-20210627201802302.32491922.png"},476:function(a,t,s){a.exports=s.p+"assets/img/image-20210627201912563.ace6c5e8.png"},536:function(a,t,s){"use strict";s.r(t);var n=s(20),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_5-更多的数据类型和运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-更多的数据类型和运算符"}},[a._v("#")]),a._v(" 5 更多的数据类型和运算符")]),a._v(" "),n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#数组"}},[a._v("数组")]),n("ul",[n("li",[n("a",{attrs:{href:"#一维数组"}},[a._v("一维数组")])]),n("li",[n("a",{attrs:{href:"#多维数组"}},[a._v("多维数组")])]),n("li",[n("a",{attrs:{href:"#其他定义语法"}},[a._v("其他定义语法")])]),n("li",[n("a",{attrs:{href:"#赋值数组引用"}},[a._v("赋值数组引用")])]),n("li",[n("a",{attrs:{href:"#length属性"}},[a._v("length属性")])]),n("li",[n("a",{attrs:{href:"#for-each风格的for循环"}},[a._v("For-Each风格的for循环")])])])]),n("li",[n("a",{attrs:{href:"#字符串"}},[a._v("字符串")]),n("ul",[n("li",[n("a",{attrs:{href:"#创建字符串"}},[a._v("创建字符串")])]),n("li",[n("a",{attrs:{href:"#字符串操作"}},[a._v("字符串操作")])]),n("li",[n("a",{attrs:{href:"#字符串是不可变的"}},[a._v("字符串是不可变的")])])])]),n("li",[n("a",{attrs:{href:"#局部变量类型推断"}},[a._v("局部变量类型推断")]),n("ul",[n("li",[n("a",{attrs:{href:"#引用类型的局部变量推断"}},[a._v("引用类型的局部变量推断")])]),n("li",[n("a",{attrs:{href:"#在for循环中使用局部变量类型推断"}},[a._v("在for循环中使用局部变量类型推断")])]),n("li",[n("a",{attrs:{href:"#var的一些限制"}},[a._v("var的一些限制")])])])]),n("li",[n("a",{attrs:{href:"#位运算符"}},[a._v("位运算符")]),n("ul",[n("li",[n("a",{attrs:{href:"#移位操作"}},[a._v("移位操作")])])])]),n("li",[n("a",{attrs:{href:"#运算符"}},[a._v("?运算符")])])])]),n("p"),a._v(" "),n("h2",{attrs:{id:"数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),n("p",[a._v("数组是相同类型的变量的集合。Java中数组可以是一维或多维的。")]),a._v(" "),n("p",[a._v("数组主要的优势是，按照这种方式组织的数据很容易操作。如计算均值，排序等。")]),a._v(" "),n("p",[a._v("尽管Java中的数组可以像其他编程语言中的数组一样使用，但它们有一个特殊的属性：它们被实现为对象。通过将数组实现为对象，可以获得几个重要优势，其中最重要的是，未使用的数组可以被垃圾回收。")]),a._v(" "),n("h3",{attrs:{id:"一维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一维数组"}},[a._v("#")]),a._v(" 一维数组")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("type array-name[ ] = new type[size]; \ntype array-name[ ] = { val1, val2, val3, ... , valN }; // 初始化数组元素\n")])])]),n("h3",{attrs:{id:"多维数组"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多维数组"}},[a._v("#")]),a._v(" 多维数组")]),a._v(" "),n("p",[a._v("一个多维数组是 数组的数组。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" table"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 一般形式")]),a._v("\ntype name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("size1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("size2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("sizeN"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"其他定义语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他定义语法"}},[a._v("#")]),a._v(" 其他定义语法")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("type[ ] var-name;\n")])])]),n("h3",{attrs:{id:"赋值数组引用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#赋值数组引用"}},[a._v("#")]),a._v(" 赋值数组引用")]),a._v(" "),n("p",[a._v("数组是一个对象，因此将一个数组变量复制给另一个变量时，是引用传递，并没有生成新的数组。")]),a._v(" "),n("h3",{attrs:{id:"length属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#length属性"}},[a._v("#")]),a._v(" length属性")]),a._v(" "),n("p",[a._v("数组是一个对象，其有一个属性为 length，可以获取当前数组中元素的个数。")]),a._v(" "),n("h3",{attrs:{id:"for-each风格的for循环"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#for-each风格的for循环"}},[a._v("#")]),a._v(" For-Each风格的for循环")]),a._v(" "),n("p",[a._v("for-each循环用来迭代对象的集合，如数组，严格按顺序进行，从开始到结束。在JDK5中，支持for-each功能。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("for(type itr-var : collection) statement-block\n")])])]),n("p",[a._v("for-each会自动执行循环。具体说，它不需要循计数器，不需要指定开始和结束值，不需要建立索引。相反，它会自动迭代整个数组，按顺序从头到尾，一次获取一个元素，")]),a._v(" "),n("p",[a._v("尽管for-each会迭代数组中所有的元素，但仍然可以使用break语句来提前终止for-each循环。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Value si :"')]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    sum "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+=")]),a._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("break")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 在x=5时结束循环")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("p",[a._v("这里有一个理解for-each循环的关键。它的迭代变量是“只读”的，应为它与底层数组有关。给迭代变量赋值不会影响底层数组。换句话说，无法通过给迭代变量复制来改变数组的内容。举例如下:")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("6")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("9")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 对于nums没有影响，不会改变nums")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("x "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("结果为:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10\n")])])]),n("h2",{attrs:{id:"字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[a._v("#")]),a._v(" 字符串")]),a._v(" "),n("p",[a._v("在某些语言中，字符串是字符数组。而在Java中，字符串是对象。")]),a._v(" "),n("h3",{attrs:{id:"创建字符串"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建字符串"}},[a._v("#")]),a._v(" 创建字符串")]),a._v(" "),n("p",[a._v("像创建对象一样创建一个字符串:")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("字面量方式:")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"hello"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"字符串操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串操作"}},[a._v("#")]),a._v(" 字符串操作")]),a._v(" "),n("ul",[n("li",[a._v("boolean equals(str): 判断两个字符串包含的字符序列是否相同")]),a._v(" "),n("li",[a._v("int length(): 返回字符串的长度")]),a._v(" "),n("li",[a._v("char charAt(index): 返回字符串在index处的字符。")]),a._v(" "),n("li",[a._v("int compareTo(str): 比较两个字符串的大小。返回值等于0，一样大；大于0，调用者大；小于0，调用者小。")]),a._v(" "),n("li",[a._v("int indexOf(str): 返回str在调用者中第一次出现的位置，没找到返回-1.")]),a._v(" "),n("li",[a._v("int lastIndexOf(Str): 返回str在调用者中最后一次出现的位置，没找到返回-1.")])]),a._v(" "),n("blockquote",[n("p",[a._v("Q: 为何String要定义equals()方法，而不用 == ？")]),a._v(" "),n("p",[a._v("A: equals()方法比较两个字符串的字符序列是否相等。== 比较它们是否引用的是同一个对象。")])]),a._v(" "),n("h3",{attrs:{id:"字符串是不可变的"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字符串是不可变的"}},[a._v("#")]),a._v(" 字符串是不可变的")]),a._v(" "),n("p",[a._v("字符串的内容是不可变的。即，一旦字符串被创建，组成字符串的字符序列就不能被修改。这个限制让Java能够更高效的实现字符串。这听起来像是缺点，但其实不是。当想要已经存在的字符变化时，只需要创建新的字符串即可。因为未使用的字符串会被自动回收。然而，必须明确的是，字符串引用变量当然可以改变它们所指向的对象。只是一个特定的字符串对象的内容在它被创建后不能被改变。")]),a._v(" "),n("blockquote",[n("p",[a._v("Q: 如何创建一个可变的字符串")]),a._v(" "),n("p",[a._v("A: 使用StringBuffer 或 StringBuilder。 它们创建的字符串可以改变。")])]),a._v(" "),n("h2",{attrs:{id:"局部变量类型推断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#局部变量类型推断"}},[a._v("#")]),a._v(" 局部变量类型推断")]),a._v(" "),n("p",[a._v("回顾一下Java变量中两个重点:")]),a._v(" "),n("ul",[n("li",[a._v("所有变量必须先声明，后使用")]),a._v(" "),n("li",[a._v("变量可以在声明时被初始化")])]),a._v(" "),n("p",[a._v("此外，变量初始化时，其初始化值的类型与变量类型要一致，或能够转换为变量的类型。因此，原则上来说，没有必要为被初始化的变量显示地指定类型，因为其类型可以通过其初始化的值推断出来。当然，在过去，Java不支持这种类型推断，且所有变量，无论它们是否被初始化，都需要显示地声明类型。现在，时代变了。")]),a._v(" "),n("p",[a._v("从JDK10开始，能够让编译器基于初始化值的类型来推断局部变量的类型，因此不必显示地声明变量的类型了。局部变量类型推断带来了很多优点。如，不用冗余地指定变量的类型，而使代码更加精简。在类型很长时，可以简化声明。当某种类型难以辨别或无法表示时，它也会有所帮助（不能被表示的类型的一个例子是匿名类的类型，在第16章中讨论）。此外，局部变量类型推理已经成为当代编程环境的一个常见部分。将其纳入Java有助于使Java与语言设计中不断发展的趋势保持一致。为了支持局部变量类型推断，上下文敏感的标识符var被添加到Java中，作为一个保留的类型名称。")]),a._v(" "),n("p",[a._v("要使用局部变量的类型推断，"),n("strong",[a._v("变量必须以var作为类型名来声明，并且必须包括一个初始化器")]),a._v("。考虑下面的语句，它声明了一个名为avg的局部双变量，它的初始化值为10.0。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("double")]),a._v(" avg "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("使用类型推理，这个声明也可以这样写:")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" avg "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10.0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("p",[a._v("在这两种情况下，avg的类型都是double。在第一种情况下，它的类型是明确指定的。在第二种情况下，它的类型被推断为double，因为初始化器10.0的类型是double。")]),a._v(" "),n("p",[a._v("如前所述，var是作为一个上下文敏感的标识符而添加的。当它在局部变量声明的上下文中被用作类型名时，它告诉编译器使用类型推理，根据初始化器的类型来确定被声明变量的类型。因此，在局部变量声明中，var是一个实际推断类型的占位符。然而，当在大多数其他地方使用时，var只是一个用户定义的标识符，没有特殊的含义。例如，下面的声明仍然有效:")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// var 只是一个简单的用户自定义的标识符")]),a._v("\n")])])]),n("p",[a._v("再强调一下:")]),a._v(" "),n("ul",[n("li",[a._v("在用var声明变量时，必须要进行初始化")]),a._v(" "),n("li",[a._v("var只能用于局部变量。例如，不能用于声明实例变量、参数或返回值。")])]),a._v(" "),n("h3",{attrs:{id:"引用类型的局部变量推断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用类型的局部变量推断"}},[a._v("#")]),a._v(" 引用类型的局部变量推断")]),a._v(" "),n("p",[a._v("对于引用类型也可以使用局部变量推断。")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" fin "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("FileInputStream")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('"test.txt"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),n("h3",{attrs:{id:"在for循环中使用局部变量类型推断"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在for循环中使用局部变量类型推断"}},[a._v("#")]),a._v(" 在for循环中使用局部变量类型推断")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" v "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" nums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("v "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[a._v('" "')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),n("h3",{attrs:{id:"var的一些限制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#var的一些限制"}},[a._v("#")]),a._v(" var的一些限制")]),a._v(" "),n("ul",[n("li",[n("p",[a._v("一次只能声明一个var变量")])]),a._v(" "),n("li",[n("p",[a._v("var变量不能使用null作为初始值")])]),a._v(" "),n("li",[n("p",[a._v("var变量不能使用表达式来进行初始化")])]),a._v(" "),n("li",[n("p",[a._v("尽管能使用var来声明数组类型，但不能使用数组来初始化var变量")]),a._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" myArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// valid")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" myArray "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[a._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// wrong")]),a._v("\n")])])])]),a._v(" "),n("li",[n("p",[a._v("var不能用于类名，也不能用于其他引用类型的名称，包括接口、枚举或注解")])]),a._v(" "),n("li",[n("p",[a._v("局部变量类型推理不能用于声明由catch语句捕获的异常类型。")])]),a._v(" "),n("li",[n("p",[a._v("另外，lambda表达式和方法引用都不能作为初始化器使用。")])])]),a._v(" "),n("h2",{attrs:{id:"位运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#位运算符"}},[a._v("#")]),a._v(" 位运算符")]),a._v(" "),n("p",[a._v("位运算符可以用于long,int,short,char和 byte类型。不能用于 boolean,float或double，或类类型。")]),a._v(" "),n("p",[n("img",{attrs:{src:s(474),alt:"image-20210627201714580"}})]),a._v(" "),n("p",[a._v("真值表:")]),a._v(" "),n("p",[n("img",{attrs:{src:s(475),alt:"image-20210627201802302"}})]),a._v(" "),n("h3",{attrs:{id:"移位操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#移位操作"}},[a._v("#")]),a._v(" 移位操作")]),a._v(" "),n("p",[n("img",{attrs:{src:s(476),alt:"image-20210627201912563"}})]),a._v(" "),n("p",[a._v("通常形式如下:")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("value << num-bits\n\nvalue >> num-bits\n\nvalue >>> num-bits\n")])])]),n("h2",{attrs:{id:"运算符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运算符"}},[a._v("#")]),a._v(" ?运算符")]),a._v(" "),n("p",[a._v("？ 用来替换 if-else")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Exp1 ? Exp2 : Exp3;\n")])])]),n("p",[a._v("Exp1为true，执行 Exp2，否则执行Exp3.")])])}),[],!1,null,null,null);t.default=r.exports}}]);